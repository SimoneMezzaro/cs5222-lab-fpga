-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_hw is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mmult_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_hw,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=230331,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=5,HLS_SYN_FF=1163,HLS_SYN_LUT=1846}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_85 : STD_LOGIC_VECTOR (10 downto 0) := "00010000101";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_585 : STD_LOGIC_VECTOR (11 downto 0) := "010110000101";
    constant ap_const_lv12_505 : STD_LOGIC_VECTOR (11 downto 0) := "010100000101";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv12_80 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel : STD_LOGIC;
    signal in_stream_data_V_0_load_A : STD_LOGIC;
    signal in_stream_data_V_0_load_B : STD_LOGIC;
    signal in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_keep_V_1_sel : STD_LOGIC;
    signal out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_strb_V_1_sel : STD_LOGIC;
    signal out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_load_A : STD_LOGIC;
    signal out_stream_last_V_1_load_B : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_id_V_1_sel : STD_LOGIC;
    signal out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_dest_V_1_sel : STD_LOGIC;
    signal out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_2_fu_610_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_reg_1123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_646_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1136 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_664_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1141 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_678_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_cast_reg_1146 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_1154 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond9_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_698_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_1159 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_fu_703_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_707_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1169 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next1_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_fu_761_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_1182 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal is_idx_5_fu_767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal is_idx_5_reg_1187 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond8_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_cast_fu_781_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_cast_reg_1192 : STD_LOGIC_VECTOR (12 downto 0);
    signal is_idx_6_fu_791_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal is_idx_6_reg_1200 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond7_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_801_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_reg_1205 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_fu_806_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_810_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_1215 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next6_fu_816_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_4_fu_864_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1228 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_27_cast_fu_878_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_cast_reg_1233 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_906_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_fu_918_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_1246 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_buf_addr_2_reg_1251 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_cast_fu_951_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_cast_reg_1261 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal offset_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_961_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_reg_1274 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond2_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_load_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal weight_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_load_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_5_fu_997_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_1312 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state24 : BOOLEAN;
    signal os_idx_2_fu_1003_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal os_idx_2_reg_1317 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1033_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1079_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_reg_1341 : STD_LOGIC_VECTOR (5 downto 0);
    signal last_assign_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_1346 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_1091_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1351 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next_fu_1097_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal converter_fu_1111_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_buf_ce0 : STD_LOGIC;
    signal offset_buf_we0 : STD_LOGIC;
    signal offset_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_buf_ce1 : STD_LOGIC;
    signal offset_buf_we1 : STD_LOGIC;
    signal offset_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_buf_ce0 : STD_LOGIC;
    signal weight_buf_we0 : STD_LOGIC;
    signal weight_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_buf_ce1 : STD_LOGIC;
    signal weight_buf_we1 : STD_LOGIC;
    signal weight_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_buf_ce0 : STD_LOGIC;
    signal in_buf_we0 : STD_LOGIC;
    signal in_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_buf_ce1 : STD_LOGIC;
    signal in_buf_we1 : STD_LOGIC;
    signal in_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_buf_ce0 : STD_LOGIC;
    signal out_buf_we0 : STD_LOGIC;
    signal out_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_buf_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_buf_ce1 : STD_LOGIC;
    signal out_buf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_343 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_idx_reg_355 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv1_reg_366 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_378 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_idx_1_reg_390 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal is_idx_2_reg_413 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv5_reg_423 : STD_LOGIC_VECTOR (11 downto 0);
    signal i2_reg_435 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_idx_3_reg_447 : STD_LOGIC_VECTOR (11 downto 0);
    signal j3_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal is_idx_4_reg_470 : STD_LOGIC_VECTOR (11 downto 0);
    signal i4_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal j5_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_503 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_525 : STD_LOGIC_VECTOR (5 downto 0);
    signal os_idx_reg_537 : STD_LOGIC_VECTOR (5 downto 0);
    signal i6_reg_549 : STD_LOGIC_VECTOR (3 downto 0);
    signal os_idx_1_reg_560 : STD_LOGIC_VECTOR (5 downto 0);
    signal j7_reg_570 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_5_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_670_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_cast_fu_694_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_742_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_773_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_cast_fu_797_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_845_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_870_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_882_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_894_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_902_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_890_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_cast_fu_929_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_933_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_943_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_cast_fu_967_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_fu_971_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_51_fu_981_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_43_fu_1009_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_1021_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_1029_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_cast_fu_1045_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_1049_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1059_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_cast_fu_1065_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_1069_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component mmult_hw_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_offset_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_weight_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_in_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_out_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    mmult_hw_CONTROL_BUS_s_axi_U : component mmult_hw_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    offset_buf_U : component mmult_hw_offset_buf
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => offset_buf_address0,
        ce0 => offset_buf_ce0,
        we0 => offset_buf_we0,
        d0 => offset_buf_d0,
        q0 => offset_buf_q0,
        address1 => offset_buf_address1,
        ce1 => offset_buf_ce1,
        we1 => offset_buf_we1,
        d1 => offset_buf_d1);

    weight_buf_U : component mmult_hw_weight_buf
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight_buf_address0,
        ce0 => weight_buf_ce0,
        we0 => weight_buf_we0,
        d0 => weight_buf_d0,
        q0 => weight_buf_q0,
        address1 => weight_buf_address1,
        ce1 => weight_buf_ce1,
        we1 => weight_buf_we1,
        d1 => weight_buf_d1);

    in_buf_U : component mmult_hw_in_buf
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_buf_address0,
        ce0 => in_buf_ce0,
        we0 => in_buf_we0,
        d0 => in_buf_d0,
        q0 => in_buf_q0,
        address1 => in_buf_address1,
        ce1 => in_buf_ce1,
        we1 => in_buf_we1,
        d1 => in_buf_d1);

    out_buf_U : component mmult_hw_out_buf
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_address0,
        ce0 => out_buf_ce0,
        we0 => out_buf_we0,
        d0 => tmp1_reg_514,
        q0 => out_buf_q0,
        address1 => out_buf_address1,
        ce1 => out_buf_ce1,
        q1 => out_buf_q1);

    mmult_hw_fadd_32nbkb_U1 : component mmult_hw_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp1_reg_514,
        din1 => tmp_38_reg_1299,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p2);

    mmult_hw_fmul_32ncud_U2 : component mmult_hw_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_buf_load_reg_1289,
        din1 => weight_buf_load_reg_1294,
        ce => ap_const_logic_1,
        dout => grp_fu_586_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_stream_data_V_0_ack_out) and (ap_const_logic_1 = in_stream_data_V_0_vld_out))) then 
                                        in_stream_data_V_0_sel_rd <= not(in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_in))) then 
                                        in_stream_data_V_0_sel_wr <= not(in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (in_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_0 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (in_stream_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_1)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_0 = in_stream_data_V_0_ack_out))) and not(((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_out)))))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_logic_1 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_3 = in_stream_dest_V_0_state)) or ((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_lv2_2 = in_stream_dest_V_0_state)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_logic_0 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_3 = in_stream_dest_V_0_state)) or ((ap_const_logic_0 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_1 = in_stream_dest_V_0_state)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_lv2_2 = in_stream_dest_V_0_state)) or ((ap_const_logic_1 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_1 = in_stream_dest_V_0_state)) or ((ap_const_lv2_3 = in_stream_dest_V_0_state) and not(((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_logic_0 = in_stream_dest_V_0_ack_out))) and not(((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_logic_1 = in_stream_dest_V_0_ack_out)))))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_logic_1 = out_stream_data_V_1_vld_out))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_in))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_lv2_3 = out_stream_data_V_1_state)) or ((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_lv2_2 = out_stream_data_V_1_state)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_0 = out_stream_data_V_1_ack_out) and (ap_const_lv2_3 = out_stream_data_V_1_state)) or ((ap_const_logic_0 = out_stream_data_V_1_ack_out) and (ap_const_lv2_1 = out_stream_data_V_1_state)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_lv2_2 = out_stream_data_V_1_state)) or ((ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_lv2_1 = out_stream_data_V_1_state)) or ((ap_const_lv2_3 = out_stream_data_V_1_state) and not(((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_0 = out_stream_data_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_out)))))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_logic_1 = out_stream_dest_V_1_vld_out))) then 
                                        out_stream_dest_V_1_sel_rd <= not(out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_3 = out_stream_dest_V_1_state)) or ((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_lv2_2 = out_stream_dest_V_1_state)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_logic_0 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_3 = out_stream_dest_V_1_state)) or ((ap_const_logic_0 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_1 = out_stream_dest_V_1_state)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_lv2_2 = out_stream_dest_V_1_state)) or ((ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_1 = out_stream_dest_V_1_state)) or ((ap_const_lv2_3 = out_stream_dest_V_1_state) and not(((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_logic_0 = out_stream_dest_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_logic_1 = out_stream_dest_V_1_ack_out)))))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_logic_1 = out_stream_id_V_1_vld_out))) then 
                                        out_stream_id_V_1_sel_rd <= not(out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_lv2_3 = out_stream_id_V_1_state)) or ((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_lv2_2 = out_stream_id_V_1_state)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_logic_0 = out_stream_id_V_1_ack_out) and (ap_const_lv2_3 = out_stream_id_V_1_state)) or ((ap_const_logic_0 = out_stream_id_V_1_ack_out) and (ap_const_lv2_1 = out_stream_id_V_1_state)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_lv2_2 = out_stream_id_V_1_state)) or ((ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_lv2_1 = out_stream_id_V_1_state)) or ((ap_const_lv2_3 = out_stream_id_V_1_state) and not(((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_logic_0 = out_stream_id_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_logic_1 = out_stream_id_V_1_ack_out)))))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_logic_1 = out_stream_keep_V_1_vld_out))) then 
                                        out_stream_keep_V_1_sel_rd <= not(out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_3 = out_stream_keep_V_1_state)) or ((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_lv2_2 = out_stream_keep_V_1_state)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_logic_0 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_3 = out_stream_keep_V_1_state)) or ((ap_const_logic_0 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_1 = out_stream_keep_V_1_state)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_lv2_2 = out_stream_keep_V_1_state)) or ((ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_1 = out_stream_keep_V_1_state)) or ((ap_const_lv2_3 = out_stream_keep_V_1_state) and not(((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_logic_0 = out_stream_keep_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_logic_1 = out_stream_keep_V_1_ack_out)))))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_logic_1 = out_stream_last_V_1_vld_out))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_in))) then 
                                        out_stream_last_V_1_sel_wr <= not(out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_lv2_3 = out_stream_last_V_1_state)) or ((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_lv2_2 = out_stream_last_V_1_state)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_0 = out_stream_last_V_1_ack_out) and (ap_const_lv2_3 = out_stream_last_V_1_state)) or ((ap_const_logic_0 = out_stream_last_V_1_ack_out) and (ap_const_lv2_1 = out_stream_last_V_1_state)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_lv2_2 = out_stream_last_V_1_state)) or ((ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_lv2_1 = out_stream_last_V_1_state)) or ((ap_const_lv2_3 = out_stream_last_V_1_state) and not(((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_0 = out_stream_last_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_out)))))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_logic_1 = out_stream_strb_V_1_vld_out))) then 
                                        out_stream_strb_V_1_sel_rd <= not(out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_3 = out_stream_strb_V_1_state)) or ((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_lv2_2 = out_stream_strb_V_1_state)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_logic_0 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_3 = out_stream_strb_V_1_state)) or ((ap_const_logic_0 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_1 = out_stream_strb_V_1_state)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_lv2_2 = out_stream_strb_V_1_state)) or ((ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_1 = out_stream_strb_V_1_state)) or ((ap_const_lv2_3 = out_stream_strb_V_1_state) and not(((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_logic_0 = out_stream_strb_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_logic_1 = out_stream_strb_V_1_ack_out)))))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_logic_1 = out_stream_user_V_1_vld_out))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_lv2_3 = out_stream_user_V_1_state)) or ((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_lv2_2 = out_stream_user_V_1_state)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_logic_0 = out_stream_user_V_1_ack_out) and (ap_const_lv2_3 = out_stream_user_V_1_state)) or ((ap_const_logic_0 = out_stream_user_V_1_ack_out) and (ap_const_lv2_1 = out_stream_user_V_1_state)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_lv2_2 = out_stream_user_V_1_state)) or ((ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_lv2_1 = out_stream_user_V_1_state)) or ((ap_const_lv2_3 = out_stream_user_V_1_state) and not(((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_logic_0 = out_stream_user_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_logic_1 = out_stream_user_V_1_ack_out)))))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_604_p2))) then 
                i1_reg_378 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_682_p2))) then 
                i1_reg_378 <= i_2_reg_1136;
            end if; 
        end if;
    end process;

    i2_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_652_p2))) then 
                i2_reg_435 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_785_p2))) then 
                i2_reg_435 <= i_3_reg_1182;
            end if; 
        end if;
    end process;

    i4_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond8_fu_755_p2))) then 
                i4_reg_480 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond3_fu_912_p2))) then 
                i4_reg_480 <= i_4_reg_1228;
            end if; 
        end if;
    end process;

    i6_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_858_p2))) then 
                i6_reg_549 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond_fu_1039_p2))) then 
                i6_reg_549 <= i_5_reg_1312;
            end if; 
        end if;
    end process;

    i_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_343 <= i_1_fu_646_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_343 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_604_p2))) then 
                indvars_iv1_reg_366 <= ap_const_lv11_85;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_682_p2))) then 
                indvars_iv1_reg_366 <= indvars_iv_next1_fu_713_p2;
            end if; 
        end if;
    end process;

    indvars_iv5_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_652_p2))) then 
                indvars_iv5_reg_423 <= ap_const_lv12_585;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_785_p2))) then 
                indvars_iv5_reg_423 <= indvars_iv_next6_fu_816_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_858_p2))) then 
                indvars_iv_reg_525 <= ap_const_lv6_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond_fu_1039_p2))) then 
                indvars_iv_reg_525 <= indvars_iv_next_fu_1097_p2;
            end if; 
        end if;
    end process;

    is_idx_1_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_604_p2))) then 
                is_idx_1_reg_390 <= ap_const_lv11_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_682_p2))) then 
                is_idx_1_reg_390 <= tmp_s_reg_1141;
            end if; 
        end if;
    end process;

    is_idx_2_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_2_reg_413 <= tmp_11_reg_1154;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_652_p2))) then 
                is_idx_2_reg_413 <= is_idx_1_reg_390;
            end if; 
        end if;
    end process;

    is_idx_3_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_652_p2))) then 
                is_idx_3_reg_447 <= ap_const_lv12_505;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_785_p2))) then 
                is_idx_3_reg_447 <= is_idx_5_reg_1187;
            end if; 
        end if;
    end process;

    is_idx_4_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_4_reg_470 <= is_idx_6_reg_1200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_755_p2))) then 
                is_idx_4_reg_470 <= is_idx_3_reg_447;
            end if; 
        end if;
    end process;

    is_idx_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_reg_355 <= tmp_2_reg_1123;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                is_idx_reg_355 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j3_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                j3_reg_459 <= j_2_reg_1215;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_755_p2))) then 
                j3_reg_459 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j5_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_955_p2))) then 
                j5_reg_491 <= j_4_reg_1246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond4_fu_858_p2))) then 
                j5_reg_491 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j7_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                j7_reg_570 <= j_3_reg_1351;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_991_p2))) then 
                j7_reg_570 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                j_reg_402 <= j_1_reg_1169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_652_p2))) then 
                j_reg_402 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                k_reg_503 <= k_1_reg_1274;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_503 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    os_idx_1_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                os_idx_1_reg_560 <= tmp_36_reg_1341;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_991_p2))) then 
                os_idx_1_reg_560 <= os_idx_reg_537;
            end if; 
        end if;
    end process;

    os_idx_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_858_p2))) then 
                os_idx_reg_537 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond_fu_1039_p2))) then 
                os_idx_reg_537 <= os_idx_2_reg_1317;
            end if; 
        end if;
    end process;

    tmp1_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                tmp1_reg_514 <= grp_fu_581_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp1_reg_514 <= offset_buf_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_1136 <= i_2_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_3_reg_1182 <= i_3_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_1228 <= i_4_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))))) then
                i_5_reg_1312 <= i_5_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                in_buf_load_reg_1289 <= in_buf_q0;
                weight_buf_load_reg_1294 <= weight_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_stream_data_V_0_load_A)) then
                in_stream_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_stream_data_V_0_load_B)) then
                in_stream_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_755_p2))) then
                is_idx_5_reg_1187 <= is_idx_5_fu_767_p2;
                    tmp_14_cast_reg_1192(11 downto 8) <= tmp_14_cast_fu_781_p1(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond7_fu_785_p2))) then
                is_idx_6_reg_1200 <= is_idx_6_fu_791_p2;
                j_2_reg_1215 <= j_2_fu_810_p2;
                tmp_37_reg_1205 <= tmp_37_fu_801_p2;
                tmp_40_reg_1210 <= tmp_40_fu_806_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond9_fu_682_p2))) then
                j_1_reg_1169 <= j_1_fu_707_p2;
                tmp_11_reg_1154 <= tmp_11_fu_688_p2;
                tmp_14_reg_1159 <= tmp_14_fu_698_p2;
                tmp_18_reg_1164 <= tmp_18_fu_703_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond_fu_1039_p2))) then
                j_3_reg_1351 <= j_3_fu_1091_p2;
                last_assign_reg_1346 <= last_assign_fu_1085_p2;
                tmp_36_reg_1341 <= tmp_36_fu_1079_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_4_reg_1246 <= j_4_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_1_reg_1274 <= k_1_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_991_p2))) then
                os_idx_2_reg_1317 <= os_idx_2_fu_1003_p2;
                    tmp_45_reg_1322(7 downto 1) <= tmp_45_fu_1033_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond3_fu_912_p2))) then
                out_buf_addr_2_reg_1251 <= tmp_51_cast_fu_938_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_data_V_1_load_A)) then
                out_stream_data_V_1_payload_A <= converter_fu_1111_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_data_V_1_load_B)) then
                out_stream_data_V_1_payload_B <= converter_fu_1111_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_last_V_1_load_A)) then
                out_stream_last_V_1_payload_A <= last_assign_reg_1346;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_last_V_1_load_B)) then
                out_stream_last_V_1_payload_B <= last_assign_reg_1346;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond4_fu_858_p2))) then
                    tmp_27_cast_reg_1233(11 downto 8) <= tmp_27_cast_fu_878_p1(11 downto 8);
                    tmp_29_reg_1238(7 downto 1) <= tmp_29_fu_906_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_2_reg_1123 <= tmp_2_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_38_reg_1299 <= grp_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tmp_50_cast_reg_1261(11 downto 8) <= tmp_50_cast_fu_951_p1(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_652_p2))) then
                    tmp_5_cast_reg_1146(11 downto 8) <= tmp_5_cast_fu_678_p1(11 downto 8);
                tmp_s_reg_1141 <= tmp_s_fu_664_p2;
            end if;
        end if;
    end process;
    tmp_5_cast_reg_1146(7 downto 0) <= "00000000";
    tmp_5_cast_reg_1146(12) <= '0';
    tmp_14_cast_reg_1192(7 downto 0) <= "00000000";
    tmp_14_cast_reg_1192(12) <= '0';
    tmp_27_cast_reg_1233(7 downto 0) <= "00000000";
    tmp_27_cast_reg_1233(12) <= '0';
    tmp_29_reg_1238(0) <= '0';
    tmp_50_cast_reg_1261(7 downto 0) <= "00000000";
    tmp_50_cast_reg_1261(12) <= '0';
    tmp_45_reg_1322(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_stream_data_V_0_vld_out, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond6_fu_652_p2, ap_CS_fsm_state5, exitcond9_fu_682_p2, ap_CS_fsm_state7, exitcond8_fu_755_p2, ap_CS_fsm_state8, exitcond7_fu_785_p2, ap_CS_fsm_state10, exitcond4_fu_858_p2, ap_CS_fsm_state11, exitcond3_fu_912_p2, ap_CS_fsm_state13, exitcond2_fu_955_p2, ap_CS_fsm_state24, exitcond1_fu_991_p2, ap_CS_fsm_state25, exitcond_fu_1039_p2, exitcond5_fu_604_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_604_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_652_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_682_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond8_fu_755_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_785_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_858_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond3_fu_912_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_955_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_991_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_991_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond_fu_1039_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state24_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in)
    begin
                ap_block_state24 <= ((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state24, exitcond1_fu_991_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_991_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state24, exitcond1_fu_991_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_991_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    converter_fu_1111_p3 <= (tmp_34_fu_1107_p1 & tmp_30_fu_1103_p1);
    exitcond1_fu_991_p2 <= "1" when (i6_reg_549 = ap_const_lv4_8) else "0";
    exitcond2_fu_955_p2 <= "1" when (k_reg_503 = ap_const_lv9_100) else "0";
    exitcond3_fu_912_p2 <= "1" when (j5_reg_491 = ap_const_lv4_A) else "0";
    exitcond4_fu_858_p2 <= "1" when (i4_reg_480 = ap_const_lv4_8) else "0";
    exitcond5_fu_604_p2 <= "1" when (is_idx_reg_355 = ap_const_lv3_5) else "0";
    exitcond6_fu_652_p2 <= "1" when (i1_reg_378 = ap_const_lv4_A) else "0";
    exitcond7_fu_785_p2 <= "1" when (is_idx_4_reg_470 = indvars_iv5_reg_423) else "0";
    exitcond8_fu_755_p2 <= "1" when (i2_reg_435 = ap_const_lv4_8) else "0";
    exitcond9_fu_682_p2 <= "1" when (is_idx_2_reg_413 = indvars_iv1_reg_366) else "0";
    exitcond_fu_1039_p2 <= "1" when (os_idx_1_reg_560 = indvars_iv_reg_525) else "0";
    grp_fu_594_p4 <= in_stream_data_V_0_data_out(63 downto 32);
    i_1_fu_646_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(i_reg_343));
    i_2_fu_658_p2 <= std_logic_vector(unsigned(i1_reg_378) + unsigned(ap_const_lv4_1));
    i_3_fu_761_p2 <= std_logic_vector(unsigned(i2_reg_435) + unsigned(ap_const_lv4_1));
    i_4_fu_864_p2 <= std_logic_vector(unsigned(i4_reg_480) + unsigned(ap_const_lv4_1));
    i_5_fu_997_p2 <= std_logic_vector(unsigned(i6_reg_549) + unsigned(ap_const_lv4_1));

    in_buf_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13, tmp_43_cast_fu_831_p1, tmp_55_cast_fu_986_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_buf_address0 <= tmp_55_cast_fu_986_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_buf_address0 <= tmp_43_cast_fu_831_p1(11 - 1 downto 0);
        else 
            in_buf_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    in_buf_address1 <= tmp_42_fu_853_p1(11 - 1 downto 0);

    in_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_buf_ce0 <= ap_const_logic_1;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_ce1 <= ap_const_logic_1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_buf_d0 <= tmp_33_fu_822_p1;
    in_buf_d1 <= grp_fu_594_p4;

    in_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_we0 <= ap_const_logic_1;
        else 
            in_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_we1 <= ap_const_logic_1;
        else 
            in_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(in_stream_data_V_0_state, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            in_stream_TDATA_blk_n <= in_stream_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_dest_V_0_state(1);
    in_stream_data_V_0_ack_in <= in_stream_data_V_0_state(1);

    in_stream_data_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_V_0_data_out_assign_proc : process(in_stream_data_V_0_payload_A, in_stream_data_V_0_payload_B, in_stream_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_stream_data_V_0_sel)) then 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_B;
        else 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_data_V_0_load_A <= (in_stream_data_V_0_state_cmp_full and not(in_stream_data_V_0_sel_wr));
    in_stream_data_V_0_load_B <= (in_stream_data_V_0_sel_wr and in_stream_data_V_0_state_cmp_full);
    in_stream_data_V_0_sel <= in_stream_data_V_0_sel_rd;
    in_stream_data_V_0_state_cmp_full <= '0' when (in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_data_V_0_vld_in <= in_stream_TVALID;
    in_stream_data_V_0_vld_out <= in_stream_data_V_0_state(0);

    in_stream_dest_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_dest_V_0_vld_in <= in_stream_TVALID;
    indvars_iv_next1_fu_713_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_366) + unsigned(ap_const_lv11_80));
    indvars_iv_next6_fu_816_p2 <= std_logic_vector(unsigned(indvars_iv5_reg_423) + unsigned(ap_const_lv12_80));
    indvars_iv_next_fu_1097_p2 <= std_logic_vector(unsigned(indvars_iv_reg_525) + unsigned(ap_const_lv6_5));
    is_idx_5_fu_767_p2 <= std_logic_vector(unsigned(is_idx_3_reg_447) + unsigned(ap_const_lv12_80));
    is_idx_6_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(is_idx_4_reg_470));
    j_1_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j_reg_402));
    j_2_fu_810_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j3_reg_459));
    j_3_fu_1091_p2 <= std_logic_vector(unsigned(j7_reg_570) + unsigned(ap_const_lv4_2));
    j_4_fu_918_p2 <= std_logic_vector(unsigned(j5_reg_491) + unsigned(ap_const_lv4_1));
    k_1_fu_961_p2 <= std_logic_vector(unsigned(k_reg_503) + unsigned(ap_const_lv9_1));
    last_assign_fu_1085_p2 <= "1" when (tmp_36_fu_1079_p2 = ap_const_lv6_28) else "0";

    offset_buf_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, tmp_4_fu_625_p1, tmp_28_fu_924_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            offset_buf_address0 <= tmp_28_fu_924_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            offset_buf_address0 <= tmp_4_fu_625_p1(4 - 1 downto 0);
        else 
            offset_buf_address0 <= "XXXX";
        end if; 
    end process;

    offset_buf_address1 <= tmp_9_fu_641_p1(4 - 1 downto 0);

    offset_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            offset_buf_ce0 <= ap_const_logic_1;
        else 
            offset_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_ce1 <= ap_const_logic_1;
        else 
            offset_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    offset_buf_d0 <= tmp_5_fu_616_p1;
    offset_buf_d1 <= grp_fu_594_p4;

    offset_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_we0 <= ap_const_logic_1;
        else 
            offset_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_we1 <= ap_const_logic_1;
        else 
            offset_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    os_idx_2_fu_1003_p2 <= std_logic_vector(unsigned(os_idx_reg_537) + unsigned(ap_const_lv6_5));

    out_buf_address0_assign_proc : process(out_buf_addr_2_reg_1251, ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_52_cast_fu_1054_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            out_buf_address0 <= tmp_52_cast_fu_1054_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_buf_address0 <= out_buf_addr_2_reg_1251;
        else 
            out_buf_address0 <= "XXXXXXX";
        end if; 
    end process;

    out_buf_address1 <= tmp_53_cast_fu_1074_p1(7 - 1 downto 0);

    out_buf_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            out_buf_ce0 <= ap_const_logic_1;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_ce1_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            out_buf_ce1 <= ap_const_logic_1;
        else 
            out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we0_assign_proc : process(ap_CS_fsm_state13, exitcond2_fu_955_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_955_p2))) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_dest_V_1_data_out;
    out_stream_TID <= out_stream_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_dest_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_stream_data_V_1_sel)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_sel_wr and out_stream_data_V_1_state_cmp_full);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_dest_V_1_ack_in <= out_stream_dest_V_1_state(1);
    out_stream_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    out_stream_dest_V_1_sel <= out_stream_dest_V_1_sel_rd;

    out_stream_dest_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_1_vld_out <= out_stream_dest_V_1_state(0);
    out_stream_id_V_1_ack_in <= out_stream_id_V_1_state(1);
    out_stream_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_id_V_1_sel <= out_stream_id_V_1_sel_rd;

    out_stream_id_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_1_vld_out <= out_stream_id_V_1_state(0);
    out_stream_keep_V_1_ack_in <= out_stream_keep_V_1_state(1);
    out_stream_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_keep_V_1_data_out <= ap_const_lv8_FF;
    out_stream_keep_V_1_sel <= out_stream_keep_V_1_sel_rd;

    out_stream_keep_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_1_vld_out <= out_stream_keep_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_last_V_1_data_out_assign_proc : process(out_stream_last_V_1_payload_A, out_stream_last_V_1_payload_B, out_stream_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_stream_last_V_1_sel)) then 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_B;
        else 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_last_V_1_load_A <= (out_stream_last_V_1_state_cmp_full and not(out_stream_last_V_1_sel_wr));
    out_stream_last_V_1_load_B <= (out_stream_last_V_1_sel_wr and out_stream_last_V_1_state_cmp_full);
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;
    out_stream_last_V_1_state_cmp_full <= '0' when (out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_last_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_strb_V_1_ack_in <= out_stream_strb_V_1_state(1);
    out_stream_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_strb_V_1_data_out <= ap_const_lv8_FF;
    out_stream_strb_V_1_sel <= out_stream_strb_V_1_sel_rd;

    out_stream_strb_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_1_vld_out <= out_stream_strb_V_1_state(0);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_user_V_1_data_out <= ap_const_lv4_0;
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;

    out_stream_user_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);
    p_shl1_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_894_p3),8));
    p_shl2_cast_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1009_p3),8));
    p_shl3_cast_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1021_p3),8));
    p_shl_cast_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_882_p3),8));
    tmp_11_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(is_idx_2_reg_413));
    tmp_12_fu_773_p3 <= (i2_reg_435 & ap_const_lv8_0);
    tmp_13_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_402),13));
    tmp_13_fu_719_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_14_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_773_p3),13));
    tmp_14_fu_698_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_694_p1) + unsigned(tmp_5_cast_reg_1146));
    tmp_17_fu_737_p2 <= (tmp_18_reg_1164 or ap_const_lv8_1);
    tmp_18_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_1159),64));
    tmp_18_fu_703_p1 <= j_reg_402(8 - 1 downto 0);
    tmp_19_fu_742_p3 <= (i1_reg_378 & tmp_17_fu_737_p2);
    tmp_1_fu_670_p3 <= (i1_reg_378 & ap_const_lv8_0);
    tmp_21_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_459),13));
    tmp_21_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_742_p3),64));
    tmp_22_fu_870_p3 <= (i4_reg_480 & ap_const_lv8_0);
    tmp_25_fu_840_p2 <= (tmp_40_reg_1210 or ap_const_lv8_1);
    tmp_26_fu_882_p3 <= (i4_reg_480 & ap_const_lv3_0);
    tmp_27_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_870_p3),13));
    tmp_27_fu_894_p3 <= (i4_reg_480 & ap_const_lv1_0);
    tmp_28_cast_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_491),8));
    tmp_28_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_491),64));
    tmp_29_cast_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_reg_570),8));
    tmp_29_fu_906_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_902_p1) + unsigned(p_shl_cast_fu_890_p1));
    tmp_2_fu_610_p2 <= std_logic_vector(unsigned(is_idx_reg_355) + unsigned(ap_const_lv3_1));
    tmp_30_fu_1103_p1 <= out_buf_q0;
    tmp_32_fu_1059_p2 <= (j7_reg_570 or ap_const_lv4_1);
    tmp_33_cast_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1059_p2),8));
    tmp_33_fu_822_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_34_fu_1107_p1 <= out_buf_q1;
    tmp_36_fu_1079_p2 <= std_logic_vector(unsigned(os_idx_1_reg_560) + unsigned(ap_const_lv6_1));
    tmp_37_cast_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_503),13));
    tmp_37_fu_801_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_797_p1) + unsigned(tmp_14_cast_reg_1192));
    tmp_40_fu_806_p1 <= j3_reg_459(8 - 1 downto 0);
    tmp_41_fu_845_p3 <= (i2_reg_435 & tmp_25_fu_840_p2);
    tmp_42_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_845_p3),64));
    tmp_43_cast_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_1205),64));
    tmp_43_fu_1009_p3 <= (i6_reg_549 & ap_const_lv3_0);
    tmp_44_fu_1021_p3 <= (i6_reg_549 & ap_const_lv1_0);
    tmp_45_fu_1033_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_1029_p1) + unsigned(p_shl2_cast_fu_1017_p1));
    tmp_46_fu_943_p3 <= (j5_reg_491 & ap_const_lv8_0);
    tmp_47_fu_933_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_929_p1) + unsigned(tmp_29_reg_1238));
    tmp_48_fu_1049_p2 <= std_logic_vector(unsigned(tmp_45_reg_1322) + unsigned(tmp_29_cast_fu_1045_p1));
    tmp_49_fu_1069_p2 <= std_logic_vector(unsigned(tmp_45_reg_1322) + unsigned(tmp_33_cast_fu_1065_p1));
    tmp_4_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_343),64));
    tmp_50_cast_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_943_p3),13));
    tmp_50_fu_971_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_1261) + unsigned(tmp_37_cast_fu_967_p1));
    tmp_51_cast_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_933_p2),64));
    tmp_51_fu_981_p2 <= std_logic_vector(unsigned(tmp_27_cast_reg_1233) + unsigned(tmp_37_cast_fu_967_p1));
    tmp_52_cast_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1049_p2),64));
    tmp_53_cast_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1069_p2),64));
    tmp_54_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_971_p2),64));
    tmp_55_cast_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_981_p2),64));
    tmp_5_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_670_p3),13));
    tmp_5_fu_616_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_8_fu_635_p2 <= (i_reg_343 or ap_const_lv4_1);
    tmp_9_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_635_p2),64));
    tmp_s_fu_664_p2 <= std_logic_vector(unsigned(is_idx_1_reg_390) + unsigned(ap_const_lv11_80));

    weight_buf_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, tmp_18_cast_fu_728_p1, tmp_54_cast_fu_976_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_buf_address0 <= tmp_54_cast_fu_976_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_buf_address0 <= tmp_18_cast_fu_728_p1(12 - 1 downto 0);
        else 
            weight_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    weight_buf_address1 <= tmp_21_fu_750_p1(12 - 1 downto 0);

    weight_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            weight_buf_ce0 <= ap_const_logic_1;
        else 
            weight_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_ce1 <= ap_const_logic_1;
        else 
            weight_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_d0 <= tmp_13_fu_719_p1;
    weight_buf_d1 <= grp_fu_594_p4;

    weight_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_we0 <= ap_const_logic_1;
        else 
            weight_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_we1 <= ap_const_logic_1;
        else 
            weight_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
