-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_hw is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mmult_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_hw,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=58303073,HLS_SYN_TPT=none,HLS_SYN_MEM=78,HLS_SYN_DSP=5,HLS_SYN_FF=1346,HLS_SYN_LUT=2019}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_85 : STD_LOGIC_VECTOR (10 downto 0) := "00010000101";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv19_505 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010100000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv19_4000 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_const_lv19_80 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_280 : STD_LOGIC_VECTOR (13 downto 0) := "00001010000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv12_80 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2800 : STD_LOGIC_VECTOR (13 downto 0) := "10100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel : STD_LOGIC;
    signal in_stream_data_V_0_load_A : STD_LOGIC;
    signal in_stream_data_V_0_load_B : STD_LOGIC;
    signal in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_keep_V_1_sel : STD_LOGIC;
    signal out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_strb_V_1_sel : STD_LOGIC;
    signal out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_load_A : STD_LOGIC;
    signal out_stream_last_V_1_load_B : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_id_V_1_sel : STD_LOGIC;
    signal out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_dest_V_1_sel : STD_LOGIC;
    signal out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_2_fu_644_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_reg_1186 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_fu_692_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1199 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_698_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1204 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_712_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_cast_reg_1209 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_1217 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond9_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_732_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_1222 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_1227 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_741_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1232 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next1_fu_747_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_idx_4_fu_797_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal is_idx_4_reg_1245 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal tmp_10_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_idx_6_fu_803_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal is_idx_6_reg_1250 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_fu_815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_1259 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_fu_829_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_cast_reg_1264 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond8_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_idx_7_fu_838_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal is_idx_7_reg_1272 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond7_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_848_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_41_reg_1277 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_44_fu_853_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_reg_1282 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_857_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_1287 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_fu_905_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_1295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_34_cast_fu_919_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_34_cast_reg_1300 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond4_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_947_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_reg_1305 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_953_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal os_idx_3_fu_959_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal os_idx_3_reg_1315 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_4_fu_971_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_1323 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal out_buf_addr_2_reg_1328 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_cast_fu_1004_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_cast_reg_1338 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal offset_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_1014_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_reg_1351 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond2_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_load_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal weight_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_load_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_5_fu_1054_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_reg_1389 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_29_fu_1060_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_reg_1394 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1090_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_49_reg_1399 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_1_fu_1096_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1142_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_reg_1423 : STD_LOGIC_VECTOR (13 downto 0);
    signal last_assign_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_1154_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1433 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next_fu_1160_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal converter_fu_1174_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_buf_ce0 : STD_LOGIC;
    signal offset_buf_we0 : STD_LOGIC;
    signal offset_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_buf_ce1 : STD_LOGIC;
    signal offset_buf_we1 : STD_LOGIC;
    signal offset_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_buf_ce0 : STD_LOGIC;
    signal weight_buf_we0 : STD_LOGIC;
    signal weight_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_buf_ce1 : STD_LOGIC;
    signal weight_buf_we1 : STD_LOGIC;
    signal weight_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_buf_ce0 : STD_LOGIC;
    signal in_buf_we0 : STD_LOGIC;
    signal in_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_buf_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_buf_ce1 : STD_LOGIC;
    signal in_buf_we1 : STD_LOGIC;
    signal in_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_buf_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_ce0 : STD_LOGIC;
    signal out_buf_we0 : STD_LOGIC;
    signal out_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_buf_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_ce1 : STD_LOGIC;
    signal out_buf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_idx_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv1_reg_380 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_idx_1_reg_404 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_416 : STD_LOGIC_VECTOR (8 downto 0);
    signal is_idx_2_reg_427 : STD_LOGIC_VECTOR (10 downto 0);
    signal t_reg_437 : STD_LOGIC_VECTOR (11 downto 0);
    signal os_idx_reg_449 : STD_LOGIC_VECTOR (13 downto 0);
    signal is_idx_3_reg_461 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvars_iv5_in_reg_473 : STD_LOGIC_VECTOR (18 downto 0);
    signal i2_reg_484 : STD_LOGIC_VECTOR (7 downto 0);
    signal j3_reg_496 : STD_LOGIC_VECTOR (8 downto 0);
    signal is_idx_5_reg_507 : STD_LOGIC_VECTOR (18 downto 0);
    signal i4_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal j5_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_540 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_562 : STD_LOGIC_VECTOR (13 downto 0);
    signal os_idx_1_reg_572 : STD_LOGIC_VECTOR (13 downto 0);
    signal i6_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal os_idx_2_reg_594 : STD_LOGIC_VECTOR (13 downto 0);
    signal j7_reg_604 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_5_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_669_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_cast_fu_728_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_776_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_cast_fu_844_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_36_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_886_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_911_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_923_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_935_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_943_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_931_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_cast_fu_982_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_986_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_50_fu_996_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_cast_fu_1024_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_fu_1028_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_cast6_fu_1020_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_1038_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_fu_1066_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_fu_1078_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_1086_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_1074_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_cast_fu_1108_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_1112_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_1122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_cast_fu_1128_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_1132_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_1170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component mmult_hw_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_offset_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_weight_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_in_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_out_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_hw_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    mmult_hw_CONTROL_BUS_s_axi_U : component mmult_hw_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    offset_buf_U : component mmult_hw_offset_buf
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => offset_buf_address0,
        ce0 => offset_buf_ce0,
        we0 => offset_buf_we0,
        d0 => offset_buf_d0,
        q0 => offset_buf_q0,
        address1 => offset_buf_address1,
        ce1 => offset_buf_ce1,
        we1 => offset_buf_we1,
        d1 => offset_buf_d1);

    weight_buf_U : component mmult_hw_weight_buf
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight_buf_address0,
        ce0 => weight_buf_ce0,
        we0 => weight_buf_we0,
        d0 => weight_buf_d0,
        q0 => weight_buf_q0,
        address1 => weight_buf_address1,
        ce1 => weight_buf_ce1,
        we1 => weight_buf_we1,
        d1 => weight_buf_d1);

    in_buf_U : component mmult_hw_in_buf
    generic map (
        DataWidth => 32,
        AddressRange => 32768,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_buf_address0,
        ce0 => in_buf_ce0,
        we0 => in_buf_we0,
        d0 => in_buf_d0,
        q0 => in_buf_q0,
        address1 => in_buf_address1,
        ce1 => in_buf_ce1,
        we1 => in_buf_we1,
        d1 => in_buf_d1);

    out_buf_U : component mmult_hw_out_buf
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_address0,
        ce0 => out_buf_ce0,
        we0 => out_buf_we0,
        d0 => tmp1_reg_551,
        q0 => out_buf_q0,
        address1 => out_buf_address1,
        ce1 => out_buf_ce1,
        q1 => out_buf_q1);

    mmult_hw_fadd_32nbkb_U1 : component mmult_hw_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp1_reg_551,
        din1 => tmp_42_reg_1376,
        ce => ap_const_logic_1,
        dout => grp_fu_615_p2);

    mmult_hw_fmul_32ncud_U2 : component mmult_hw_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_buf_load_reg_1366,
        din1 => weight_buf_load_reg_1371,
        ce => ap_const_logic_1,
        dout => grp_fu_620_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_stream_data_V_0_ack_out) and (ap_const_logic_1 = in_stream_data_V_0_vld_out))) then 
                                        in_stream_data_V_0_sel_rd <= not(in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_in))) then 
                                        in_stream_data_V_0_sel_wr <= not(in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (in_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_0 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (in_stream_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_stream_data_V_0_ack_out) and (in_stream_data_V_0_state = ap_const_lv2_1)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_stream_data_V_0_vld_in) and (ap_const_logic_0 = in_stream_data_V_0_ack_out))) and not(((ap_const_logic_0 = in_stream_data_V_0_vld_in) and (ap_const_logic_1 = in_stream_data_V_0_ack_out)))))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_logic_1 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_3 = in_stream_dest_V_0_state)) or ((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_lv2_2 = in_stream_dest_V_0_state)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_logic_0 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_3 = in_stream_dest_V_0_state)) or ((ap_const_logic_0 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_1 = in_stream_dest_V_0_state)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_lv2_2 = in_stream_dest_V_0_state)) or ((ap_const_logic_1 = in_stream_dest_V_0_ack_out) and (ap_const_lv2_1 = in_stream_dest_V_0_state)) or ((ap_const_lv2_3 = in_stream_dest_V_0_state) and not(((ap_const_logic_1 = in_stream_dest_V_0_vld_in) and (ap_const_logic_0 = in_stream_dest_V_0_ack_out))) and not(((ap_const_logic_0 = in_stream_dest_V_0_vld_in) and (ap_const_logic_1 = in_stream_dest_V_0_ack_out)))))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_logic_1 = out_stream_data_V_1_vld_out))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_in))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_lv2_3 = out_stream_data_V_1_state)) or ((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_lv2_2 = out_stream_data_V_1_state)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_0 = out_stream_data_V_1_ack_out) and (ap_const_lv2_3 = out_stream_data_V_1_state)) or ((ap_const_logic_0 = out_stream_data_V_1_ack_out) and (ap_const_lv2_1 = out_stream_data_V_1_state)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_lv2_2 = out_stream_data_V_1_state)) or ((ap_const_logic_1 = out_stream_data_V_1_ack_out) and (ap_const_lv2_1 = out_stream_data_V_1_state)) or ((ap_const_lv2_3 = out_stream_data_V_1_state) and not(((ap_const_logic_1 = out_stream_data_V_1_vld_in) and (ap_const_logic_0 = out_stream_data_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_data_V_1_vld_in) and (ap_const_logic_1 = out_stream_data_V_1_ack_out)))))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_logic_1 = out_stream_dest_V_1_vld_out))) then 
                                        out_stream_dest_V_1_sel_rd <= not(out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_3 = out_stream_dest_V_1_state)) or ((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_lv2_2 = out_stream_dest_V_1_state)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_logic_0 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_3 = out_stream_dest_V_1_state)) or ((ap_const_logic_0 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_1 = out_stream_dest_V_1_state)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_lv2_2 = out_stream_dest_V_1_state)) or ((ap_const_logic_1 = out_stream_dest_V_1_ack_out) and (ap_const_lv2_1 = out_stream_dest_V_1_state)) or ((ap_const_lv2_3 = out_stream_dest_V_1_state) and not(((ap_const_logic_1 = out_stream_dest_V_1_vld_in) and (ap_const_logic_0 = out_stream_dest_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_dest_V_1_vld_in) and (ap_const_logic_1 = out_stream_dest_V_1_ack_out)))))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_logic_1 = out_stream_id_V_1_vld_out))) then 
                                        out_stream_id_V_1_sel_rd <= not(out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_lv2_3 = out_stream_id_V_1_state)) or ((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_lv2_2 = out_stream_id_V_1_state)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_logic_0 = out_stream_id_V_1_ack_out) and (ap_const_lv2_3 = out_stream_id_V_1_state)) or ((ap_const_logic_0 = out_stream_id_V_1_ack_out) and (ap_const_lv2_1 = out_stream_id_V_1_state)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_lv2_2 = out_stream_id_V_1_state)) or ((ap_const_logic_1 = out_stream_id_V_1_ack_out) and (ap_const_lv2_1 = out_stream_id_V_1_state)) or ((ap_const_lv2_3 = out_stream_id_V_1_state) and not(((ap_const_logic_1 = out_stream_id_V_1_vld_in) and (ap_const_logic_0 = out_stream_id_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_id_V_1_vld_in) and (ap_const_logic_1 = out_stream_id_V_1_ack_out)))))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_logic_1 = out_stream_keep_V_1_vld_out))) then 
                                        out_stream_keep_V_1_sel_rd <= not(out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_3 = out_stream_keep_V_1_state)) or ((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_lv2_2 = out_stream_keep_V_1_state)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_logic_0 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_3 = out_stream_keep_V_1_state)) or ((ap_const_logic_0 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_1 = out_stream_keep_V_1_state)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_lv2_2 = out_stream_keep_V_1_state)) or ((ap_const_logic_1 = out_stream_keep_V_1_ack_out) and (ap_const_lv2_1 = out_stream_keep_V_1_state)) or ((ap_const_lv2_3 = out_stream_keep_V_1_state) and not(((ap_const_logic_1 = out_stream_keep_V_1_vld_in) and (ap_const_logic_0 = out_stream_keep_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_keep_V_1_vld_in) and (ap_const_logic_1 = out_stream_keep_V_1_ack_out)))))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_logic_1 = out_stream_last_V_1_vld_out))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_in))) then 
                                        out_stream_last_V_1_sel_wr <= not(out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_lv2_3 = out_stream_last_V_1_state)) or ((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_lv2_2 = out_stream_last_V_1_state)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_0 = out_stream_last_V_1_ack_out) and (ap_const_lv2_3 = out_stream_last_V_1_state)) or ((ap_const_logic_0 = out_stream_last_V_1_ack_out) and (ap_const_lv2_1 = out_stream_last_V_1_state)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_lv2_2 = out_stream_last_V_1_state)) or ((ap_const_logic_1 = out_stream_last_V_1_ack_out) and (ap_const_lv2_1 = out_stream_last_V_1_state)) or ((ap_const_lv2_3 = out_stream_last_V_1_state) and not(((ap_const_logic_1 = out_stream_last_V_1_vld_in) and (ap_const_logic_0 = out_stream_last_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_last_V_1_vld_in) and (ap_const_logic_1 = out_stream_last_V_1_ack_out)))))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_logic_1 = out_stream_strb_V_1_vld_out))) then 
                                        out_stream_strb_V_1_sel_rd <= not(out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_3 = out_stream_strb_V_1_state)) or ((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_lv2_2 = out_stream_strb_V_1_state)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_logic_0 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_3 = out_stream_strb_V_1_state)) or ((ap_const_logic_0 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_1 = out_stream_strb_V_1_state)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_lv2_2 = out_stream_strb_V_1_state)) or ((ap_const_logic_1 = out_stream_strb_V_1_ack_out) and (ap_const_lv2_1 = out_stream_strb_V_1_state)) or ((ap_const_lv2_3 = out_stream_strb_V_1_state) and not(((ap_const_logic_1 = out_stream_strb_V_1_vld_in) and (ap_const_logic_0 = out_stream_strb_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_strb_V_1_vld_in) and (ap_const_logic_1 = out_stream_strb_V_1_ack_out)))))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_logic_1 = out_stream_user_V_1_vld_out))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_lv2_3 = out_stream_user_V_1_state)) or ((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_lv2_2 = out_stream_user_V_1_state)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_logic_0 = out_stream_user_V_1_ack_out) and (ap_const_lv2_3 = out_stream_user_V_1_state)) or ((ap_const_logic_0 = out_stream_user_V_1_ack_out) and (ap_const_lv2_1 = out_stream_user_V_1_state)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_lv2_2 = out_stream_user_V_1_state)) or ((ap_const_logic_1 = out_stream_user_V_1_ack_out) and (ap_const_lv2_1 = out_stream_user_V_1_state)) or ((ap_const_lv2_3 = out_stream_user_V_1_state) and not(((ap_const_logic_1 = out_stream_user_V_1_vld_in) and (ap_const_logic_0 = out_stream_user_V_1_ack_out))) and not(((ap_const_logic_0 = out_stream_user_V_1_vld_in) and (ap_const_logic_1 = out_stream_user_V_1_ack_out)))))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_638_p2))) then 
                i1_reg_392 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_716_p2))) then 
                i1_reg_392 <= i_2_reg_1199;
            end if; 
        end if;
    end process;

    i2_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond7_fu_833_p2))) then 
                i2_reg_484 <= i_3_reg_1259;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = tmp_10_fu_789_p3))) then 
                i2_reg_484 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i4_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond8_fu_809_p2))) then 
                i4_reg_517 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_965_p2))) then 
                i4_reg_517 <= i_4_reg_1295;
            end if; 
        end if;
    end process;

    i6_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond_fu_1102_p2))) then 
                i6_reg_583 <= i_5_reg_1389;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_899_p2))) then 
                i6_reg_583 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_357 <= i_1_fu_680_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_357 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_638_p2))) then 
                indvars_iv1_reg_380 <= ap_const_lv11_85;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_716_p2))) then 
                indvars_iv1_reg_380 <= indvars_iv_next1_fu_747_p2;
            end if; 
        end if;
    end process;

    indvars_iv5_in_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond7_fu_833_p2))) then 
                indvars_iv5_in_reg_473 <= is_idx_6_reg_1250;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = tmp_10_fu_789_p3))) then 
                indvars_iv5_in_reg_473 <= is_idx_3_reg_461;
            end if; 
        end if;
    end process;

    indvars_iv_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond_fu_1102_p2))) then 
                indvars_iv_reg_562 <= indvars_iv_next_fu_1160_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_899_p2))) then 
                indvars_iv_reg_562 <= tmp_20_fu_953_p2;
            end if; 
        end if;
    end process;

    is_idx_1_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_638_p2))) then 
                is_idx_1_reg_404 <= ap_const_lv11_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_716_p2))) then 
                is_idx_1_reg_404 <= tmp_s_reg_1204;
            end if; 
        end if;
    end process;

    is_idx_2_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_2_reg_427 <= tmp_11_reg_1217;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_686_p2))) then 
                is_idx_2_reg_427 <= is_idx_1_reg_404;
            end if; 
        end if;
    end process;

    is_idx_3_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_686_p2))) then 
                is_idx_3_reg_461 <= ap_const_lv19_505;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then 
                is_idx_3_reg_461 <= is_idx_4_reg_1245;
            end if; 
        end if;
    end process;

    is_idx_5_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_5_reg_507 <= is_idx_7_reg_1272;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond8_fu_809_p2))) then 
                is_idx_5_reg_507 <= indvars_iv5_in_reg_473;
            end if; 
        end if;
    end process;

    is_idx_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                is_idx_reg_369 <= tmp_2_reg_1186;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                is_idx_reg_369 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j3_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                j3_reg_496 <= j_2_reg_1287;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond8_fu_809_p2))) then 
                j3_reg_496 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j5_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_1008_p2))) then 
                j5_reg_528 <= j_4_reg_1323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond4_fu_899_p2))) then 
                j5_reg_528 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j7_reg_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                j7_reg_604 <= j_3_reg_1433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond1_fu_1048_p2))) then 
                j7_reg_604 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                j_reg_416 <= j_1_reg_1232;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_686_p2))) then 
                j_reg_416 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                k_reg_540 <= k_1_reg_1351;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_reg_540 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    os_idx_1_reg_572_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond_fu_1102_p2))) then 
                os_idx_1_reg_572 <= tmp_29_reg_1394;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_899_p2))) then 
                os_idx_1_reg_572 <= os_idx_reg_449;
            end if; 
        end if;
    end process;

    os_idx_2_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                os_idx_2_reg_594 <= tmp_40_reg_1423;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond1_fu_1048_p2))) then 
                os_idx_2_reg_594 <= os_idx_1_reg_572;
            end if; 
        end if;
    end process;

    os_idx_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_686_p2))) then 
                os_idx_reg_449 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then 
                os_idx_reg_449 <= os_idx_3_reg_1315;
            end if; 
        end if;
    end process;

    t_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_686_p2))) then 
                t_reg_437 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then 
                t_reg_437 <= t_1_fu_1096_p2;
            end if; 
        end if;
    end process;

    tmp1_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                tmp1_reg_551 <= grp_fu_615_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                tmp1_reg_551 <= offset_buf_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_1199 <= i_2_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3_reg_1259 <= i_3_fu_815_p2;
                is_idx_6_reg_1250 <= is_idx_6_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_4_reg_1295 <= i_4_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_5_reg_1389 <= i_5_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                in_buf_load_reg_1366 <= in_buf_q0;
                weight_buf_load_reg_1371 <= weight_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_stream_data_V_0_load_A)) then
                in_stream_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_stream_data_V_0_load_B)) then
                in_stream_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = tmp_10_fu_789_p3))) then
                is_idx_4_reg_1245 <= is_idx_4_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond7_fu_833_p2))) then
                is_idx_7_reg_1272 <= is_idx_7_fu_838_p2;
                j_2_reg_1287 <= j_2_fu_857_p2;
                tmp_41_reg_1277 <= tmp_41_fu_848_p2;
                tmp_44_reg_1282 <= tmp_44_fu_853_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond9_fu_716_p2))) then
                j_1_reg_1232 <= j_1_fu_741_p2;
                tmp_11_reg_1217 <= tmp_11_fu_722_p2;
                tmp_14_reg_1222 <= tmp_14_fu_732_p2;
                tmp_23_reg_1227 <= tmp_23_fu_737_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond_fu_1102_p2))) then
                j_3_reg_1433 <= j_3_fu_1154_p2;
                last_assign_reg_1428 <= last_assign_fu_1148_p2;
                tmp_40_reg_1423 <= tmp_40_fu_1142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_4_reg_1323 <= j_4_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                k_1_reg_1351 <= k_1_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_899_p2))) then
                os_idx_3_reg_1315 <= os_idx_3_fu_959_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond3_fu_965_p2))) then
                out_buf_addr_2_reg_1328 <= tmp_55_cast_fu_991_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_data_V_1_load_A)) then
                out_stream_data_V_1_payload_A <= converter_fu_1174_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_data_V_1_load_B)) then
                out_stream_data_V_1_payload_B <= converter_fu_1174_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_last_V_1_load_A)) then
                out_stream_last_V_1_payload_A <= last_assign_reg_1428;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_stream_last_V_1_load_B)) then
                out_stream_last_V_1_payload_B <= last_assign_reg_1428;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond8_fu_809_p2))) then
                    tmp_24_cast_reg_1264(15 downto 8) <= tmp_24_cast_fu_829_p1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond1_fu_1048_p2))) then
                tmp_29_reg_1394 <= tmp_29_fu_1060_p2;
                    tmp_49_reg_1399(11 downto 1) <= tmp_49_fu_1090_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_2_reg_1186 <= tmp_2_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond4_fu_899_p2))) then
                    tmp_34_cast_reg_1300(15 downto 8) <= tmp_34_cast_fu_919_p1(15 downto 8);
                    tmp_34_reg_1305(11 downto 1) <= tmp_34_fu_947_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_42_reg_1376 <= grp_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    tmp_54_cast_reg_1338(11 downto 8) <= tmp_54_cast_fu_1004_p1(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_686_p2))) then
                    tmp_5_cast_reg_1209(11 downto 8) <= tmp_5_cast_fu_712_p1(11 downto 8);
                tmp_s_reg_1204 <= tmp_s_fu_698_p2;
            end if;
        end if;
    end process;
    tmp_5_cast_reg_1209(7 downto 0) <= "00000000";
    tmp_5_cast_reg_1209(12) <= '0';
    tmp_24_cast_reg_1264(7 downto 0) <= "00000000";
    tmp_24_cast_reg_1264(16) <= '0';
    tmp_34_cast_reg_1300(7 downto 0) <= "00000000";
    tmp_34_cast_reg_1300(16) <= '0';
    tmp_34_reg_1305(0) <= '0';
    tmp_54_cast_reg_1338(7 downto 0) <= "00000000";
    tmp_54_cast_reg_1338(12) <= '0';
    tmp_49_reg_1399(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_stream_data_V_0_vld_out, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond6_fu_686_p2, ap_CS_fsm_state5, exitcond9_fu_716_p2, ap_CS_fsm_state7, tmp_10_fu_789_p3, ap_CS_fsm_state8, exitcond8_fu_809_p2, ap_CS_fsm_state9, exitcond7_fu_833_p2, ap_CS_fsm_state11, exitcond4_fu_899_p2, ap_CS_fsm_state12, exitcond3_fu_965_p2, ap_CS_fsm_state14, exitcond2_fu_1008_p2, ap_CS_fsm_state25, exitcond1_fu_1048_p2, ap_CS_fsm_state26, exitcond_fu_1102_p2, exitcond5_fu_638_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond5_fu_638_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond6_fu_686_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond9_fu_716_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = tmp_10_fu_789_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_0 = tmp_10_fu_789_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond8_fu_809_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond7_fu_833_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_899_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_965_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_1008_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond_fu_1102_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state7_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in)
    begin
                ap_block_state7 <= ((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state7, tmp_10_fu_789_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = tmp_10_fu_789_p3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state7, tmp_10_fu_789_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_stream_data_V_1_ack_in) or (ap_const_logic_0 = out_stream_keep_V_1_ack_in) or (ap_const_logic_0 = out_stream_strb_V_1_ack_in) or (ap_const_logic_0 = out_stream_user_V_1_ack_in) or (ap_const_logic_0 = out_stream_last_V_1_ack_in) or (ap_const_logic_0 = out_stream_id_V_1_ack_in) or (ap_const_logic_0 = out_stream_dest_V_1_ack_in))) and (ap_const_lv1_1 = tmp_10_fu_789_p3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    converter_fu_1174_p3 <= (tmp_37_fu_1170_p1 & tmp_33_fu_1166_p1);
    exitcond1_fu_1048_p2 <= "1" when (i6_reg_583 = ap_const_lv8_80) else "0";
    exitcond2_fu_1008_p2 <= "1" when (k_reg_540 = ap_const_lv9_100) else "0";
    exitcond3_fu_965_p2 <= "1" when (j5_reg_528 = ap_const_lv4_A) else "0";
    exitcond4_fu_899_p2 <= "1" when (i4_reg_517 = ap_const_lv8_80) else "0";
    exitcond5_fu_638_p2 <= "1" when (is_idx_reg_369 = ap_const_lv3_5) else "0";
    exitcond6_fu_686_p2 <= "1" when (i1_reg_392 = ap_const_lv4_A) else "0";
    exitcond7_fu_833_p2 <= "1" when (is_idx_5_reg_507 = is_idx_6_reg_1250) else "0";
    exitcond8_fu_809_p2 <= "1" when (i2_reg_484 = ap_const_lv8_80) else "0";
    exitcond9_fu_716_p2 <= "1" when (is_idx_2_reg_427 = indvars_iv1_reg_380) else "0";
    exitcond_fu_1102_p2 <= "1" when (os_idx_2_reg_594 = indvars_iv_reg_562) else "0";
    grp_fu_628_p4 <= in_stream_data_V_0_data_out(63 downto 32);
    i_1_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(i_reg_357));
    i_2_fu_692_p2 <= std_logic_vector(unsigned(i1_reg_392) + unsigned(ap_const_lv4_1));
    i_3_fu_815_p2 <= std_logic_vector(unsigned(i2_reg_484) + unsigned(ap_const_lv8_1));
    i_4_fu_905_p2 <= std_logic_vector(unsigned(i4_reg_517) + unsigned(ap_const_lv8_1));
    i_5_fu_1054_p2 <= std_logic_vector(unsigned(i6_reg_583) + unsigned(ap_const_lv8_1));

    in_buf_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, tmp_47_cast_fu_872_p1, tmp_59_cast_fu_1043_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            in_buf_address0 <= tmp_59_cast_fu_1043_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_buf_address0 <= tmp_47_cast_fu_872_p1(15 - 1 downto 0);
        else 
            in_buf_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    in_buf_address1 <= tmp_46_fu_894_p1(15 - 1 downto 0);

    in_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_buf_ce0 <= ap_const_logic_1;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_ce1 <= ap_const_logic_1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_buf_d0 <= tmp_36_fu_863_p1;
    in_buf_d1 <= grp_fu_628_p4;

    in_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_we0 <= ap_const_logic_1;
        else 
            in_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            in_buf_we1 <= ap_const_logic_1;
        else 
            in_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(in_stream_data_V_0_state, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            in_stream_TDATA_blk_n <= in_stream_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_dest_V_0_state(1);
    in_stream_data_V_0_ack_in <= in_stream_data_V_0_state(1);

    in_stream_data_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_V_0_data_out_assign_proc : process(in_stream_data_V_0_payload_A, in_stream_data_V_0_payload_B, in_stream_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_stream_data_V_0_sel)) then 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_B;
        else 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_data_V_0_load_A <= (in_stream_data_V_0_state_cmp_full and not(in_stream_data_V_0_sel_wr));
    in_stream_data_V_0_load_B <= (in_stream_data_V_0_sel_wr and in_stream_data_V_0_state_cmp_full);
    in_stream_data_V_0_sel <= in_stream_data_V_0_sel_rd;
    in_stream_data_V_0_state_cmp_full <= '0' when (in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_data_V_0_vld_in <= in_stream_TVALID;
    in_stream_data_V_0_vld_out <= in_stream_data_V_0_state(0);

    in_stream_dest_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_dest_V_0_vld_in <= in_stream_TVALID;
    indvars_iv_next1_fu_747_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_380) + unsigned(ap_const_lv11_80));
    indvars_iv_next_fu_1160_p2 <= std_logic_vector(unsigned(indvars_iv_reg_562) + unsigned(ap_const_lv14_5));
    is_idx_4_fu_797_p2 <= std_logic_vector(unsigned(is_idx_3_reg_461) + unsigned(ap_const_lv19_4000));
    is_idx_6_fu_803_p2 <= std_logic_vector(unsigned(indvars_iv5_in_reg_473) + unsigned(ap_const_lv19_80));
    is_idx_7_fu_838_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(is_idx_5_reg_507));
    j_1_fu_741_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j_reg_416));
    j_2_fu_857_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j3_reg_496));
    j_3_fu_1154_p2 <= std_logic_vector(unsigned(j7_reg_604) + unsigned(ap_const_lv4_2));
    j_4_fu_971_p2 <= std_logic_vector(unsigned(j5_reg_528) + unsigned(ap_const_lv4_1));
    k_1_fu_1014_p2 <= std_logic_vector(unsigned(k_reg_540) + unsigned(ap_const_lv9_1));
    last_assign_fu_1148_p2 <= "1" when (tmp_40_fu_1142_p2 = ap_const_lv14_2800) else "0";

    offset_buf_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_4_fu_659_p1, tmp_31_fu_977_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            offset_buf_address0 <= tmp_31_fu_977_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            offset_buf_address0 <= tmp_4_fu_659_p1(4 - 1 downto 0);
        else 
            offset_buf_address0 <= "XXXX";
        end if; 
    end process;

    offset_buf_address1 <= tmp_9_fu_675_p1(4 - 1 downto 0);

    offset_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            offset_buf_ce0 <= ap_const_logic_1;
        else 
            offset_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_ce1 <= ap_const_logic_1;
        else 
            offset_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    offset_buf_d0 <= tmp_5_fu_650_p1;
    offset_buf_d1 <= grp_fu_628_p4;

    offset_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_we0 <= ap_const_logic_1;
        else 
            offset_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            offset_buf_we1 <= ap_const_logic_1;
        else 
            offset_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    os_idx_3_fu_959_p2 <= std_logic_vector(unsigned(os_idx_reg_449) + unsigned(ap_const_lv14_280));

    out_buf_address0_assign_proc : process(out_buf_addr_2_reg_1328, ap_CS_fsm_state14, ap_CS_fsm_state26, tmp_56_cast_fu_1117_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_buf_address0 <= tmp_56_cast_fu_1117_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_address0 <= out_buf_addr_2_reg_1328;
        else 
            out_buf_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    out_buf_address1 <= tmp_57_cast_fu_1137_p1(11 - 1 downto 0);

    out_buf_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            out_buf_ce0 <= ap_const_logic_1;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_ce1_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_buf_ce1 <= ap_const_logic_1;
        else 
            out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we0_assign_proc : process(ap_CS_fsm_state14, exitcond2_fu_1008_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_1008_p2))) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_dest_V_1_data_out;
    out_stream_TID <= out_stream_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_dest_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_stream_data_V_1_sel)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_sel_wr and out_stream_data_V_1_state_cmp_full);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_dest_V_1_ack_in <= out_stream_dest_V_1_state(1);
    out_stream_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    out_stream_dest_V_1_sel <= out_stream_dest_V_1_sel_rd;

    out_stream_dest_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_1_vld_out <= out_stream_dest_V_1_state(0);
    out_stream_id_V_1_ack_in <= out_stream_id_V_1_state(1);
    out_stream_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_id_V_1_sel <= out_stream_id_V_1_sel_rd;

    out_stream_id_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_1_vld_out <= out_stream_id_V_1_state(0);
    out_stream_keep_V_1_ack_in <= out_stream_keep_V_1_state(1);
    out_stream_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_keep_V_1_data_out <= ap_const_lv8_FF;
    out_stream_keep_V_1_sel <= out_stream_keep_V_1_sel_rd;

    out_stream_keep_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_1_vld_out <= out_stream_keep_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_last_V_1_data_out_assign_proc : process(out_stream_last_V_1_payload_A, out_stream_last_V_1_payload_B, out_stream_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_stream_last_V_1_sel)) then 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_B;
        else 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_last_V_1_load_A <= (out_stream_last_V_1_state_cmp_full and not(out_stream_last_V_1_sel_wr));
    out_stream_last_V_1_load_B <= (out_stream_last_V_1_sel_wr and out_stream_last_V_1_state_cmp_full);
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;
    out_stream_last_V_1_state_cmp_full <= '0' when (out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_last_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_strb_V_1_ack_in <= out_stream_strb_V_1_state(1);
    out_stream_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_strb_V_1_data_out <= ap_const_lv8_FF;
    out_stream_strb_V_1_sel <= out_stream_strb_V_1_sel_rd;

    out_stream_strb_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_1_vld_out <= out_stream_strb_V_1_state(0);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_user_V_1_data_out <= ap_const_lv4_0;
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;

    out_stream_user_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);
    p_shl1_cast_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_935_p3),12));
    p_shl2_cast_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1066_p3),12));
    p_shl3_cast_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1078_p3),12));
    p_shl_cast_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_923_p3),12));
    t_1_fu_1096_p2 <= std_logic_vector(unsigned(t_reg_437) + unsigned(ap_const_lv12_80));
    tmp_10_fu_789_p3 <= t_reg_437(11 downto 11);
    tmp_11_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(is_idx_2_reg_427));
    tmp_13_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_416),13));
    tmp_13_fu_753_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_14_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_1222),64));
    tmp_14_fu_732_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_728_p1) + unsigned(tmp_5_cast_reg_1209));
    tmp_17_fu_771_p2 <= (tmp_23_reg_1227 or ap_const_lv8_1);
    tmp_18_fu_776_p3 <= (i1_reg_392 & tmp_17_fu_771_p2);
    tmp_19_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_776_p3),64));
    tmp_1_fu_704_p3 <= (i1_reg_392 & ap_const_lv8_0);
    tmp_20_fu_953_p2 <= (os_idx_reg_449 or ap_const_lv14_5);
    tmp_22_fu_821_p3 <= (i2_reg_484 & ap_const_lv8_0);
    tmp_23_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_496),17));
    tmp_23_fu_737_p1 <= j_reg_416(8 - 1 downto 0);
    tmp_24_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_821_p3),17));
    tmp_27_fu_881_p2 <= (tmp_44_reg_1282 or ap_const_lv8_1);
    tmp_28_fu_911_p3 <= (i4_reg_517 & ap_const_lv8_0);
    tmp_29_fu_1060_p2 <= std_logic_vector(unsigned(os_idx_1_reg_572) + unsigned(ap_const_lv14_5));
    tmp_2_fu_644_p2 <= std_logic_vector(unsigned(is_idx_reg_369) + unsigned(ap_const_lv3_1));
    tmp_30_fu_923_p3 <= (i4_reg_517 & ap_const_lv3_0);
    tmp_31_cast_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_528),12));
    tmp_31_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_528),64));
    tmp_32_cast_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_reg_604),12));
    tmp_32_fu_935_p3 <= (i4_reg_517 & ap_const_lv1_0);
    tmp_33_fu_1166_p1 <= out_buf_q0;
    tmp_34_cast_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_911_p3),17));
    tmp_34_fu_947_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_943_p1) + unsigned(p_shl_cast_fu_931_p1));
    tmp_35_fu_1122_p2 <= (j7_reg_604 or ap_const_lv4_1);
    tmp_36_cast_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1122_p2),12));
    tmp_36_fu_863_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_37_fu_1170_p1 <= out_buf_q1;
    tmp_40_fu_1142_p2 <= std_logic_vector(unsigned(os_idx_2_reg_594) + unsigned(ap_const_lv14_1));
    tmp_41_cast6_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_540),17));
    tmp_41_cast_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_540),13));
    tmp_41_fu_848_p2 <= std_logic_vector(unsigned(tmp_23_cast_fu_844_p1) + unsigned(tmp_24_cast_reg_1264));
    tmp_44_fu_853_p1 <= j3_reg_496(8 - 1 downto 0);
    tmp_45_fu_886_p3 <= (i2_reg_484 & tmp_27_fu_881_p2);
    tmp_46_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_886_p3),64));
    tmp_47_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_1277),64));
    tmp_47_fu_1066_p3 <= (i6_reg_583 & ap_const_lv3_0);
    tmp_48_fu_1078_p3 <= (i6_reg_583 & ap_const_lv1_0);
    tmp_49_fu_1090_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_1086_p1) + unsigned(p_shl2_cast_fu_1074_p1));
    tmp_4_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_357),64));
    tmp_50_fu_996_p3 <= (j5_reg_528 & ap_const_lv8_0);
    tmp_51_fu_986_p2 <= std_logic_vector(unsigned(tmp_31_cast_fu_982_p1) + unsigned(tmp_34_reg_1305));
    tmp_52_fu_1112_p2 <= std_logic_vector(unsigned(tmp_49_reg_1399) + unsigned(tmp_32_cast_fu_1108_p1));
    tmp_53_fu_1132_p2 <= std_logic_vector(unsigned(tmp_49_reg_1399) + unsigned(tmp_36_cast_fu_1128_p1));
    tmp_54_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_996_p3),13));
    tmp_54_fu_1028_p2 <= std_logic_vector(unsigned(tmp_54_cast_reg_1338) + unsigned(tmp_41_cast_fu_1024_p1));
    tmp_55_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_986_p2),64));
    tmp_55_fu_1038_p2 <= std_logic_vector(unsigned(tmp_34_cast_reg_1300) + unsigned(tmp_41_cast6_fu_1020_p1));
    tmp_56_cast_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1112_p2),64));
    tmp_57_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1132_p2),64));
    tmp_58_cast_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1028_p2),64));
    tmp_59_cast_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1038_p2),64));
    tmp_5_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_704_p3),13));
    tmp_5_fu_650_p1 <= in_stream_data_V_0_data_out(32 - 1 downto 0);
    tmp_8_fu_669_p2 <= (i_reg_357 or ap_const_lv4_1);
    tmp_9_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_669_p2),64));
    tmp_s_fu_698_p2 <= std_logic_vector(unsigned(is_idx_1_reg_404) + unsigned(ap_const_lv11_80));

    weight_buf_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, tmp_14_cast_fu_762_p1, tmp_58_cast_fu_1033_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weight_buf_address0 <= tmp_58_cast_fu_1033_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_buf_address0 <= tmp_14_cast_fu_762_p1(12 - 1 downto 0);
        else 
            weight_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    weight_buf_address1 <= tmp_19_fu_784_p1(12 - 1 downto 0);

    weight_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            weight_buf_ce0 <= ap_const_logic_1;
        else 
            weight_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_buf_ce1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_ce1 <= ap_const_logic_1;
        else 
            weight_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_d0 <= tmp_13_fu_753_p1;
    weight_buf_d1 <= grp_fu_628_p4;

    weight_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_we0 <= ap_const_logic_1;
        else 
            weight_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_buf_we1_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            weight_buf_we1 <= ap_const_logic_1;
        else 
            weight_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
