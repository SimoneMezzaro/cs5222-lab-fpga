// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_hw,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=230331,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=5,HLS_SYN_FF=1163,HLS_SYN_LUT=1846}" *)

module mmult_hw (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [7:0] in_stream_TKEEP;
input  [7:0] in_stream_TSTRB;
input  [3:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [4:0] in_stream_TDEST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [7:0] out_stream_TKEEP;
output  [7:0] out_stream_TSTRB;
output  [3:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [4:0] out_stream_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] in_stream_data_V_0_data_out;
wire    in_stream_data_V_0_vld_in;
wire    in_stream_data_V_0_vld_out;
wire    in_stream_data_V_0_ack_in;
reg    in_stream_data_V_0_ack_out;
reg   [63:0] in_stream_data_V_0_payload_A;
reg   [63:0] in_stream_data_V_0_payload_B;
reg    in_stream_data_V_0_sel_rd;
reg    in_stream_data_V_0_sel_wr;
wire    in_stream_data_V_0_sel;
wire    in_stream_data_V_0_load_A;
wire    in_stream_data_V_0_load_B;
reg   [1:0] in_stream_data_V_0_state;
wire    in_stream_data_V_0_state_cmp_full;
wire    in_stream_dest_V_0_vld_in;
reg    in_stream_dest_V_0_ack_out;
reg   [1:0] in_stream_dest_V_0_state;
reg   [63:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [63:0] out_stream_data_V_1_payload_A;
reg   [63:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
wire   [7:0] out_stream_keep_V_1_data_out;
reg    out_stream_keep_V_1_vld_in;
wire    out_stream_keep_V_1_vld_out;
wire    out_stream_keep_V_1_ack_in;
wire    out_stream_keep_V_1_ack_out;
reg    out_stream_keep_V_1_sel_rd;
wire    out_stream_keep_V_1_sel;
reg   [1:0] out_stream_keep_V_1_state;
wire   [7:0] out_stream_strb_V_1_data_out;
reg    out_stream_strb_V_1_vld_in;
wire    out_stream_strb_V_1_vld_out;
wire    out_stream_strb_V_1_ack_in;
wire    out_stream_strb_V_1_ack_out;
reg    out_stream_strb_V_1_sel_rd;
wire    out_stream_strb_V_1_sel;
reg   [1:0] out_stream_strb_V_1_state;
wire   [3:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg    out_stream_user_V_1_sel_rd;
wire    out_stream_user_V_1_sel;
reg   [1:0] out_stream_user_V_1_state;
reg   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg   [0:0] out_stream_last_V_1_payload_A;
reg   [0:0] out_stream_last_V_1_payload_B;
reg    out_stream_last_V_1_sel_rd;
reg    out_stream_last_V_1_sel_wr;
wire    out_stream_last_V_1_sel;
wire    out_stream_last_V_1_load_A;
wire    out_stream_last_V_1_load_B;
reg   [1:0] out_stream_last_V_1_state;
wire    out_stream_last_V_1_state_cmp_full;
wire   [4:0] out_stream_id_V_1_data_out;
reg    out_stream_id_V_1_vld_in;
wire    out_stream_id_V_1_vld_out;
wire    out_stream_id_V_1_ack_in;
wire    out_stream_id_V_1_ack_out;
reg    out_stream_id_V_1_sel_rd;
wire    out_stream_id_V_1_sel;
reg   [1:0] out_stream_id_V_1_state;
wire   [4:0] out_stream_dest_V_1_data_out;
reg    out_stream_dest_V_1_vld_in;
wire    out_stream_dest_V_1_vld_out;
wire    out_stream_dest_V_1_ack_in;
wire    out_stream_dest_V_1_ack_out;
reg    out_stream_dest_V_1_sel_rd;
wire    out_stream_dest_V_1_sel;
reg   [1:0] out_stream_dest_V_1_state;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [2:0] tmp_2_fu_610_p2;
reg   [2:0] tmp_2_reg_1123;
wire    ap_CS_fsm_state2;
wire   [3:0] i_1_fu_646_p2;
wire   [3:0] i_2_fu_658_p2;
reg   [3:0] i_2_reg_1136;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_s_fu_664_p2;
reg   [10:0] tmp_s_reg_1141;
wire   [0:0] exitcond6_fu_652_p2;
wire   [12:0] tmp_5_cast_fu_678_p1;
reg   [12:0] tmp_5_cast_reg_1146;
wire   [10:0] tmp_11_fu_688_p2;
reg   [10:0] tmp_11_reg_1154;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond9_fu_682_p2;
wire   [12:0] tmp_14_fu_698_p2;
reg   [12:0] tmp_14_reg_1159;
wire   [7:0] tmp_18_fu_703_p1;
reg   [7:0] tmp_18_reg_1164;
wire   [8:0] j_1_fu_707_p2;
reg   [8:0] j_1_reg_1169;
wire   [10:0] indvars_iv_next1_fu_713_p2;
wire   [3:0] i_3_fu_761_p2;
reg   [3:0] i_3_reg_1182;
wire    ap_CS_fsm_state7;
wire   [11:0] is_idx_5_fu_767_p2;
reg   [11:0] is_idx_5_reg_1187;
wire   [0:0] exitcond8_fu_755_p2;
wire   [12:0] tmp_14_cast_fu_781_p1;
reg   [12:0] tmp_14_cast_reg_1192;
wire   [11:0] is_idx_6_fu_791_p2;
reg   [11:0] is_idx_6_reg_1200;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond7_fu_785_p2;
wire   [12:0] tmp_37_fu_801_p2;
reg   [12:0] tmp_37_reg_1205;
wire   [7:0] tmp_40_fu_806_p1;
reg   [7:0] tmp_40_reg_1210;
wire   [8:0] j_2_fu_810_p2;
reg   [8:0] j_2_reg_1215;
wire   [11:0] indvars_iv_next6_fu_816_p2;
wire   [3:0] i_4_fu_864_p2;
reg   [3:0] i_4_reg_1228;
wire    ap_CS_fsm_state10;
wire   [12:0] tmp_27_cast_fu_878_p1;
reg   [12:0] tmp_27_cast_reg_1233;
wire   [0:0] exitcond4_fu_858_p2;
wire   [7:0] tmp_29_fu_906_p2;
reg   [7:0] tmp_29_reg_1238;
wire   [3:0] j_4_fu_918_p2;
reg   [3:0] j_4_reg_1246;
wire    ap_CS_fsm_state11;
reg   [6:0] out_buf_addr_2_reg_1251;
wire   [0:0] exitcond3_fu_912_p2;
wire   [12:0] tmp_50_cast_fu_951_p1;
reg   [12:0] tmp_50_cast_reg_1261;
wire    ap_CS_fsm_state12;
wire   [31:0] offset_buf_q0;
wire   [8:0] k_1_fu_961_p2;
reg   [8:0] k_1_reg_1274;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond2_fu_955_p2;
wire   [31:0] in_buf_q0;
reg   [31:0] in_buf_load_reg_1289;
wire    ap_CS_fsm_state14;
wire   [31:0] weight_buf_q0;
reg   [31:0] weight_buf_load_reg_1294;
wire   [31:0] grp_fu_586_p2;
reg   [31:0] tmp_38_reg_1299;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_581_p2;
wire    ap_CS_fsm_state23;
wire   [3:0] i_5_fu_997_p2;
reg   [3:0] i_5_reg_1312;
wire    ap_CS_fsm_state24;
reg    ap_block_state24;
wire   [5:0] os_idx_2_fu_1003_p2;
reg   [5:0] os_idx_2_reg_1317;
wire   [0:0] exitcond1_fu_991_p2;
wire   [7:0] tmp_45_fu_1033_p2;
reg   [7:0] tmp_45_reg_1322;
wire    ap_CS_fsm_state25;
wire   [0:0] exitcond_fu_1039_p2;
wire   [5:0] tmp_36_fu_1079_p2;
reg   [5:0] tmp_36_reg_1341;
wire   [0:0] last_assign_fu_1085_p2;
reg   [0:0] last_assign_reg_1346;
wire   [3:0] j_3_fu_1091_p2;
reg   [3:0] j_3_reg_1351;
wire   [5:0] indvars_iv_next_fu_1097_p2;
wire   [63:0] converter_fu_1111_p3;
reg   [3:0] offset_buf_address0;
reg    offset_buf_ce0;
reg    offset_buf_we0;
wire   [31:0] offset_buf_d0;
wire   [3:0] offset_buf_address1;
reg    offset_buf_ce1;
reg    offset_buf_we1;
wire   [31:0] offset_buf_d1;
reg   [11:0] weight_buf_address0;
reg    weight_buf_ce0;
reg    weight_buf_we0;
wire   [31:0] weight_buf_d0;
wire   [11:0] weight_buf_address1;
reg    weight_buf_ce1;
reg    weight_buf_we1;
wire   [31:0] weight_buf_d1;
reg   [10:0] in_buf_address0;
reg    in_buf_ce0;
reg    in_buf_we0;
wire   [31:0] in_buf_d0;
wire   [10:0] in_buf_address1;
reg    in_buf_ce1;
reg    in_buf_we1;
wire   [31:0] in_buf_d1;
reg   [6:0] out_buf_address0;
reg    out_buf_ce0;
reg    out_buf_we0;
wire   [31:0] out_buf_q0;
wire   [6:0] out_buf_address1;
reg    out_buf_ce1;
wire   [31:0] out_buf_q1;
reg   [3:0] i_reg_343;
reg   [2:0] is_idx_reg_355;
reg   [10:0] indvars_iv1_reg_366;
wire   [0:0] exitcond5_fu_604_p2;
reg   [3:0] i1_reg_378;
reg   [10:0] is_idx_1_reg_390;
reg   [8:0] j_reg_402;
reg   [10:0] is_idx_2_reg_413;
reg   [11:0] indvars_iv5_reg_423;
reg   [3:0] i2_reg_435;
reg   [11:0] is_idx_3_reg_447;
reg   [8:0] j3_reg_459;
reg   [11:0] is_idx_4_reg_470;
reg   [3:0] i4_reg_480;
reg   [3:0] j5_reg_491;
reg   [8:0] k_reg_503;
reg   [31:0] tmp1_reg_514;
reg   [5:0] indvars_iv_reg_525;
reg   [5:0] os_idx_reg_537;
reg   [3:0] i6_reg_549;
reg   [5:0] os_idx_1_reg_560;
reg   [3:0] j7_reg_570;
wire   [63:0] tmp_4_fu_625_p1;
wire   [63:0] tmp_9_fu_641_p1;
wire   [63:0] tmp_18_cast_fu_728_p1;
wire   [63:0] tmp_21_fu_750_p1;
wire   [63:0] tmp_43_cast_fu_831_p1;
wire   [63:0] tmp_42_fu_853_p1;
wire   [63:0] tmp_51_cast_fu_938_p1;
wire   [63:0] tmp_28_fu_924_p1;
wire   [63:0] tmp_54_cast_fu_976_p1;
wire   [63:0] tmp_55_cast_fu_986_p1;
wire   [63:0] tmp_52_cast_fu_1054_p1;
wire   [63:0] tmp_53_cast_fu_1074_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state15;
wire   [31:0] tmp_5_fu_616_p1;
wire   [31:0] grp_fu_594_p4;
wire   [3:0] tmp_8_fu_635_p2;
wire   [11:0] tmp_1_fu_670_p3;
wire   [12:0] tmp_13_cast_fu_694_p1;
wire   [31:0] tmp_13_fu_719_p1;
wire   [7:0] tmp_17_fu_737_p2;
wire   [11:0] tmp_19_fu_742_p3;
wire   [11:0] tmp_12_fu_773_p3;
wire   [12:0] tmp_21_cast_fu_797_p1;
wire   [31:0] tmp_33_fu_822_p1;
wire   [7:0] tmp_25_fu_840_p2;
wire   [11:0] tmp_41_fu_845_p3;
wire   [11:0] tmp_22_fu_870_p3;
wire   [6:0] tmp_26_fu_882_p3;
wire   [4:0] tmp_27_fu_894_p3;
wire   [7:0] p_shl1_cast_fu_902_p1;
wire   [7:0] p_shl_cast_fu_890_p1;
wire   [7:0] tmp_28_cast_fu_929_p1;
wire   [7:0] tmp_47_fu_933_p2;
wire   [11:0] tmp_46_fu_943_p3;
wire   [12:0] tmp_37_cast_fu_967_p1;
wire   [12:0] tmp_50_fu_971_p2;
wire   [12:0] tmp_51_fu_981_p2;
wire   [6:0] tmp_43_fu_1009_p3;
wire   [4:0] tmp_44_fu_1021_p3;
wire   [7:0] p_shl3_cast_fu_1029_p1;
wire   [7:0] p_shl2_cast_fu_1017_p1;
wire   [7:0] tmp_29_cast_fu_1045_p1;
wire   [7:0] tmp_48_fu_1049_p2;
wire   [3:0] tmp_32_fu_1059_p2;
wire   [7:0] tmp_33_cast_fu_1065_p1;
wire   [7:0] tmp_49_fu_1069_p2;
wire   [31:0] tmp_34_fu_1107_p1;
wire   [31:0] tmp_30_fu_1103_p1;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 in_stream_data_V_0_sel_rd = 1'b0;
#0 in_stream_data_V_0_sel_wr = 1'b0;
#0 in_stream_data_V_0_state = 2'd0;
#0 in_stream_dest_V_0_state = 2'd0;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_keep_V_1_sel_rd = 1'b0;
#0 out_stream_keep_V_1_state = 2'd0;
#0 out_stream_strb_V_1_sel_rd = 1'b0;
#0 out_stream_strb_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_sel_wr = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 out_stream_id_V_1_sel_rd = 1'b0;
#0 out_stream_id_V_1_state = 2'd0;
#0 out_stream_dest_V_1_sel_rd = 1'b0;
#0 out_stream_dest_V_1_state = 2'd0;
end

mmult_hw_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
mmult_hw_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mmult_hw_offset_buf #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
offset_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(offset_buf_address0),
    .ce0(offset_buf_ce0),
    .we0(offset_buf_we0),
    .d0(offset_buf_d0),
    .q0(offset_buf_q0),
    .address1(offset_buf_address1),
    .ce1(offset_buf_ce1),
    .we1(offset_buf_we1),
    .d1(offset_buf_d1)
);

mmult_hw_weight_buf #(
    .DataWidth( 32 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
weight_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buf_address0),
    .ce0(weight_buf_ce0),
    .we0(weight_buf_we0),
    .d0(weight_buf_d0),
    .q0(weight_buf_q0),
    .address1(weight_buf_address1),
    .ce1(weight_buf_ce1),
    .we1(weight_buf_we1),
    .d1(weight_buf_d1)
);

mmult_hw_in_buf #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
in_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_buf_address0),
    .ce0(in_buf_ce0),
    .we0(in_buf_we0),
    .d0(in_buf_d0),
    .q0(in_buf_q0),
    .address1(in_buf_address1),
    .ce1(in_buf_ce1),
    .we1(in_buf_we1),
    .d1(in_buf_d1)
);

mmult_hw_out_buf #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
out_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_buf_address0),
    .ce0(out_buf_ce0),
    .we0(out_buf_we0),
    .d0(tmp1_reg_514),
    .q0(out_buf_q0),
    .address1(out_buf_address1),
    .ce1(out_buf_ce1),
    .q1(out_buf_q1)
);

mmult_hw_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_hw_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp1_reg_514),
    .din1(tmp_38_reg_1299),
    .ce(1'b1),
    .dout(grp_fu_581_p2)
);

mmult_hw_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_hw_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_buf_load_reg_1289),
    .din1(weight_buf_load_reg_1294),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_stream_data_V_0_ack_out) & (1'b1 == in_stream_data_V_0_vld_out))) begin
            in_stream_data_V_0_sel_rd <= ~in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_stream_data_V_0_vld_in) & (1'b1 == in_stream_data_V_0_ack_in))) begin
            in_stream_data_V_0_sel_wr <= ~in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_stream_data_V_0_vld_in) & (1'b1 == in_stream_data_V_0_ack_out) & (in_stream_data_V_0_state == 2'd3)) | ((1'b0 == in_stream_data_V_0_vld_in) & (in_stream_data_V_0_state == 2'd2)))) begin
            in_stream_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_stream_data_V_0_vld_in) & (1'b0 == in_stream_data_V_0_ack_out) & (in_stream_data_V_0_state == 2'd3)) | ((1'b0 == in_stream_data_V_0_ack_out) & (in_stream_data_V_0_state == 2'd1)))) begin
            in_stream_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_stream_data_V_0_vld_in) & (in_stream_data_V_0_state == 2'd2)) | ((1'b1 == in_stream_data_V_0_ack_out) & (in_stream_data_V_0_state == 2'd1)) | ((in_stream_data_V_0_state == 2'd3) & ~((1'b1 == in_stream_data_V_0_vld_in) & (1'b0 == in_stream_data_V_0_ack_out)) & ~((1'b0 == in_stream_data_V_0_vld_in) & (1'b1 == in_stream_data_V_0_ack_out))))) begin
            in_stream_data_V_0_state <= 2'd3;
        end else begin
            in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_stream_dest_V_0_vld_in) & (1'b1 == in_stream_dest_V_0_ack_out) & (2'd3 == in_stream_dest_V_0_state)) | ((1'b0 == in_stream_dest_V_0_vld_in) & (2'd2 == in_stream_dest_V_0_state)))) begin
            in_stream_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_stream_dest_V_0_vld_in) & (1'b0 == in_stream_dest_V_0_ack_out) & (2'd3 == in_stream_dest_V_0_state)) | ((1'b0 == in_stream_dest_V_0_ack_out) & (2'd1 == in_stream_dest_V_0_state)))) begin
            in_stream_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_stream_dest_V_0_vld_in) & (2'd2 == in_stream_dest_V_0_state)) | ((1'b1 == in_stream_dest_V_0_ack_out) & (2'd1 == in_stream_dest_V_0_state)) | ((2'd3 == in_stream_dest_V_0_state) & ~((1'b1 == in_stream_dest_V_0_vld_in) & (1'b0 == in_stream_dest_V_0_ack_out)) & ~((1'b0 == in_stream_dest_V_0_vld_in) & (1'b1 == in_stream_dest_V_0_ack_out))))) begin
            in_stream_dest_V_0_state <= 2'd3;
        end else begin
            in_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_data_V_1_ack_out) & (1'b1 == out_stream_data_V_1_vld_out))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_in))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_out) & (2'd3 == out_stream_data_V_1_state)) | ((1'b0 == out_stream_data_V_1_vld_in) & (2'd2 == out_stream_data_V_1_state)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_data_V_1_vld_in) & (1'b0 == out_stream_data_V_1_ack_out) & (2'd3 == out_stream_data_V_1_state)) | ((1'b0 == out_stream_data_V_1_ack_out) & (2'd1 == out_stream_data_V_1_state)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_data_V_1_vld_in) & (2'd2 == out_stream_data_V_1_state)) | ((1'b1 == out_stream_data_V_1_ack_out) & (2'd1 == out_stream_data_V_1_state)) | ((2'd3 == out_stream_data_V_1_state) & ~((1'b1 == out_stream_data_V_1_vld_in) & (1'b0 == out_stream_data_V_1_ack_out)) & ~((1'b0 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_out))))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_dest_V_1_ack_out) & (1'b1 == out_stream_dest_V_1_vld_out))) begin
            out_stream_dest_V_1_sel_rd <= ~out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_dest_V_1_vld_in) & (1'b1 == out_stream_dest_V_1_ack_out) & (2'd3 == out_stream_dest_V_1_state)) | ((1'b0 == out_stream_dest_V_1_vld_in) & (2'd2 == out_stream_dest_V_1_state)))) begin
            out_stream_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_dest_V_1_vld_in) & (1'b0 == out_stream_dest_V_1_ack_out) & (2'd3 == out_stream_dest_V_1_state)) | ((1'b0 == out_stream_dest_V_1_ack_out) & (2'd1 == out_stream_dest_V_1_state)))) begin
            out_stream_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_dest_V_1_vld_in) & (2'd2 == out_stream_dest_V_1_state)) | ((1'b1 == out_stream_dest_V_1_ack_out) & (2'd1 == out_stream_dest_V_1_state)) | ((2'd3 == out_stream_dest_V_1_state) & ~((1'b1 == out_stream_dest_V_1_vld_in) & (1'b0 == out_stream_dest_V_1_ack_out)) & ~((1'b0 == out_stream_dest_V_1_vld_in) & (1'b1 == out_stream_dest_V_1_ack_out))))) begin
            out_stream_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_id_V_1_ack_out) & (1'b1 == out_stream_id_V_1_vld_out))) begin
            out_stream_id_V_1_sel_rd <= ~out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_id_V_1_vld_in) & (1'b1 == out_stream_id_V_1_ack_out) & (2'd3 == out_stream_id_V_1_state)) | ((1'b0 == out_stream_id_V_1_vld_in) & (2'd2 == out_stream_id_V_1_state)))) begin
            out_stream_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_id_V_1_vld_in) & (1'b0 == out_stream_id_V_1_ack_out) & (2'd3 == out_stream_id_V_1_state)) | ((1'b0 == out_stream_id_V_1_ack_out) & (2'd1 == out_stream_id_V_1_state)))) begin
            out_stream_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_id_V_1_vld_in) & (2'd2 == out_stream_id_V_1_state)) | ((1'b1 == out_stream_id_V_1_ack_out) & (2'd1 == out_stream_id_V_1_state)) | ((2'd3 == out_stream_id_V_1_state) & ~((1'b1 == out_stream_id_V_1_vld_in) & (1'b0 == out_stream_id_V_1_ack_out)) & ~((1'b0 == out_stream_id_V_1_vld_in) & (1'b1 == out_stream_id_V_1_ack_out))))) begin
            out_stream_id_V_1_state <= 2'd3;
        end else begin
            out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_keep_V_1_ack_out) & (1'b1 == out_stream_keep_V_1_vld_out))) begin
            out_stream_keep_V_1_sel_rd <= ~out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_keep_V_1_vld_in) & (1'b1 == out_stream_keep_V_1_ack_out) & (2'd3 == out_stream_keep_V_1_state)) | ((1'b0 == out_stream_keep_V_1_vld_in) & (2'd2 == out_stream_keep_V_1_state)))) begin
            out_stream_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_keep_V_1_vld_in) & (1'b0 == out_stream_keep_V_1_ack_out) & (2'd3 == out_stream_keep_V_1_state)) | ((1'b0 == out_stream_keep_V_1_ack_out) & (2'd1 == out_stream_keep_V_1_state)))) begin
            out_stream_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_keep_V_1_vld_in) & (2'd2 == out_stream_keep_V_1_state)) | ((1'b1 == out_stream_keep_V_1_ack_out) & (2'd1 == out_stream_keep_V_1_state)) | ((2'd3 == out_stream_keep_V_1_state) & ~((1'b1 == out_stream_keep_V_1_vld_in) & (1'b0 == out_stream_keep_V_1_ack_out)) & ~((1'b0 == out_stream_keep_V_1_vld_in) & (1'b1 == out_stream_keep_V_1_ack_out))))) begin
            out_stream_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_last_V_1_ack_out) & (1'b1 == out_stream_last_V_1_vld_out))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_in))) begin
            out_stream_last_V_1_sel_wr <= ~out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_out) & (2'd3 == out_stream_last_V_1_state)) | ((1'b0 == out_stream_last_V_1_vld_in) & (2'd2 == out_stream_last_V_1_state)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_last_V_1_vld_in) & (1'b0 == out_stream_last_V_1_ack_out) & (2'd3 == out_stream_last_V_1_state)) | ((1'b0 == out_stream_last_V_1_ack_out) & (2'd1 == out_stream_last_V_1_state)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_last_V_1_vld_in) & (2'd2 == out_stream_last_V_1_state)) | ((1'b1 == out_stream_last_V_1_ack_out) & (2'd1 == out_stream_last_V_1_state)) | ((2'd3 == out_stream_last_V_1_state) & ~((1'b1 == out_stream_last_V_1_vld_in) & (1'b0 == out_stream_last_V_1_ack_out)) & ~((1'b0 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_out))))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_strb_V_1_ack_out) & (1'b1 == out_stream_strb_V_1_vld_out))) begin
            out_stream_strb_V_1_sel_rd <= ~out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_strb_V_1_vld_in) & (1'b1 == out_stream_strb_V_1_ack_out) & (2'd3 == out_stream_strb_V_1_state)) | ((1'b0 == out_stream_strb_V_1_vld_in) & (2'd2 == out_stream_strb_V_1_state)))) begin
            out_stream_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_strb_V_1_vld_in) & (1'b0 == out_stream_strb_V_1_ack_out) & (2'd3 == out_stream_strb_V_1_state)) | ((1'b0 == out_stream_strb_V_1_ack_out) & (2'd1 == out_stream_strb_V_1_state)))) begin
            out_stream_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_strb_V_1_vld_in) & (2'd2 == out_stream_strb_V_1_state)) | ((1'b1 == out_stream_strb_V_1_ack_out) & (2'd1 == out_stream_strb_V_1_state)) | ((2'd3 == out_stream_strb_V_1_state) & ~((1'b1 == out_stream_strb_V_1_vld_in) & (1'b0 == out_stream_strb_V_1_ack_out)) & ~((1'b0 == out_stream_strb_V_1_vld_in) & (1'b1 == out_stream_strb_V_1_ack_out))))) begin
            out_stream_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_user_V_1_ack_out) & (1'b1 == out_stream_user_V_1_vld_out))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_user_V_1_vld_in) & (1'b1 == out_stream_user_V_1_ack_out) & (2'd3 == out_stream_user_V_1_state)) | ((1'b0 == out_stream_user_V_1_vld_in) & (2'd2 == out_stream_user_V_1_state)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_user_V_1_vld_in) & (1'b0 == out_stream_user_V_1_ack_out) & (2'd3 == out_stream_user_V_1_state)) | ((1'b0 == out_stream_user_V_1_ack_out) & (2'd1 == out_stream_user_V_1_state)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_user_V_1_vld_in) & (2'd2 == out_stream_user_V_1_state)) | ((1'b1 == out_stream_user_V_1_ack_out) & (2'd1 == out_stream_user_V_1_state)) | ((2'd3 == out_stream_user_V_1_state) & ~((1'b1 == out_stream_user_V_1_vld_in) & (1'b0 == out_stream_user_V_1_ack_out)) & ~((1'b0 == out_stream_user_V_1_vld_in) & (1'b1 == out_stream_user_V_1_ack_out))))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond5_fu_604_p2))) begin
        i1_reg_378 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond9_fu_682_p2))) begin
        i1_reg_378 <= i_2_reg_1136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond6_fu_652_p2))) begin
        i2_reg_435 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_785_p2))) begin
        i2_reg_435 <= i_3_reg_1182;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond8_fu_755_p2))) begin
        i4_reg_480 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond3_fu_912_p2))) begin
        i4_reg_480 <= i_4_reg_1228;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_858_p2))) begin
        i6_reg_549 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond_fu_1039_p2))) begin
        i6_reg_549 <= i_5_reg_1312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        i_reg_343 <= i_1_fu_646_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_343 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond5_fu_604_p2))) begin
        indvars_iv1_reg_366 <= 11'd133;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond9_fu_682_p2))) begin
        indvars_iv1_reg_366 <= indvars_iv_next1_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond6_fu_652_p2))) begin
        indvars_iv5_reg_423 <= 12'd1413;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_785_p2))) begin
        indvars_iv5_reg_423 <= indvars_iv_next6_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_858_p2))) begin
        indvars_iv_reg_525 <= 6'd5;
    end else if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond_fu_1039_p2))) begin
        indvars_iv_reg_525 <= indvars_iv_next_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond5_fu_604_p2))) begin
        is_idx_1_reg_390 <= 11'd5;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond9_fu_682_p2))) begin
        is_idx_1_reg_390 <= tmp_s_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        is_idx_2_reg_413 <= tmp_11_reg_1154;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_652_p2))) begin
        is_idx_2_reg_413 <= is_idx_1_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond6_fu_652_p2))) begin
        is_idx_3_reg_447 <= 12'd1285;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_785_p2))) begin
        is_idx_3_reg_447 <= is_idx_5_reg_1187;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        is_idx_4_reg_470 <= is_idx_6_reg_1200;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond8_fu_755_p2))) begin
        is_idx_4_reg_470 <= is_idx_3_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        is_idx_reg_355 <= tmp_2_reg_1123;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        is_idx_reg_355 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        j3_reg_459 <= j_2_reg_1215;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond8_fu_755_p2))) begin
        j3_reg_459 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_955_p2))) begin
        j5_reg_491 <= j_4_reg_1246;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond4_fu_858_p2))) begin
        j5_reg_491 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        j7_reg_570 <= j_3_reg_1351;
    end else if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond1_fu_991_p2))) begin
        j7_reg_570 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        j_reg_402 <= j_1_reg_1169;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_652_p2))) begin
        j_reg_402 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        k_reg_503 <= k_1_reg_1274;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_503 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        os_idx_1_reg_560 <= tmp_36_reg_1341;
    end else if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond1_fu_991_p2))) begin
        os_idx_1_reg_560 <= os_idx_reg_537;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_858_p2))) begin
        os_idx_reg_537 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond_fu_1039_p2))) begin
        os_idx_reg_537 <= os_idx_2_reg_1317;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp1_reg_514 <= grp_fu_581_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp1_reg_514 <= offset_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_1136 <= i_2_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_3_reg_1182 <= i_3_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_1228 <= i_4_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)))) begin
        i_5_reg_1312 <= i_5_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        in_buf_load_reg_1289 <= in_buf_q0;
        weight_buf_load_reg_1294 <= weight_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_stream_data_V_0_load_A)) begin
        in_stream_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_stream_data_V_0_load_B)) begin
        in_stream_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond8_fu_755_p2))) begin
        is_idx_5_reg_1187 <= is_idx_5_fu_767_p2;
        tmp_14_cast_reg_1192[11 : 8] <= tmp_14_cast_fu_781_p1[11 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond7_fu_785_p2))) begin
        is_idx_6_reg_1200 <= is_idx_6_fu_791_p2;
        j_2_reg_1215 <= j_2_fu_810_p2;
        tmp_37_reg_1205 <= tmp_37_fu_801_p2;
        tmp_40_reg_1210 <= tmp_40_fu_806_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond9_fu_682_p2))) begin
        j_1_reg_1169 <= j_1_fu_707_p2;
        tmp_11_reg_1154 <= tmp_11_fu_688_p2;
        tmp_14_reg_1159 <= tmp_14_fu_698_p2;
        tmp_18_reg_1164 <= tmp_18_fu_703_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (1'd0 == exitcond_fu_1039_p2))) begin
        j_3_reg_1351 <= j_3_fu_1091_p2;
        last_assign_reg_1346 <= last_assign_fu_1085_p2;
        tmp_36_reg_1341 <= tmp_36_fu_1079_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_4_reg_1246 <= j_4_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_1_reg_1274 <= k_1_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond1_fu_991_p2))) begin
        os_idx_2_reg_1317 <= os_idx_2_fu_1003_p2;
        tmp_45_reg_1322[7 : 1] <= tmp_45_fu_1033_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond3_fu_912_p2))) begin
        out_buf_addr_2_reg_1251 <= tmp_51_cast_fu_938_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_data_V_1_load_A)) begin
        out_stream_data_V_1_payload_A <= converter_fu_1111_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_data_V_1_load_B)) begin
        out_stream_data_V_1_payload_B <= converter_fu_1111_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_last_V_1_load_A)) begin
        out_stream_last_V_1_payload_A <= last_assign_reg_1346;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_last_V_1_load_B)) begin
        out_stream_last_V_1_payload_B <= last_assign_reg_1346;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond4_fu_858_p2))) begin
        tmp_27_cast_reg_1233[11 : 8] <= tmp_27_cast_fu_878_p1[11 : 8];
        tmp_29_reg_1238[7 : 1] <= tmp_29_fu_906_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_2_reg_1123 <= tmp_2_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_38_reg_1299 <= grp_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_50_cast_reg_1261[11 : 8] <= tmp_50_cast_fu_951_p1[11 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_652_p2))) begin
        tmp_5_cast_reg_1146[11 : 8] <= tmp_5_cast_fu_678_p1[11 : 8];
        tmp_s_reg_1141 <= tmp_s_fu_664_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond1_fu_991_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond1_fu_991_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        in_buf_address0 = tmp_55_cast_fu_986_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        in_buf_address0 = tmp_43_cast_fu_831_p1;
    end else begin
        in_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1)))) begin
        in_buf_ce0 = 1'b1;
    end else begin
        in_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        in_buf_ce1 = 1'b1;
    end else begin
        in_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        in_buf_we0 = 1'b1;
    end else begin
        in_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        in_buf_we1 = 1'b1;
    end else begin
        in_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        in_stream_TDATA_blk_n = in_stream_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1)))) begin
        in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_stream_data_V_0_sel)) begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B;
    end else begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1)))) begin
        in_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        offset_buf_address0 = tmp_28_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        offset_buf_address0 = tmp_4_fu_625_p1;
    end else begin
        offset_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state11))) begin
        offset_buf_ce0 = 1'b1;
    end else begin
        offset_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        offset_buf_ce1 = 1'b1;
    end else begin
        offset_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        offset_buf_we0 = 1'b1;
    end else begin
        offset_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        offset_buf_we1 = 1'b1;
    end else begin
        offset_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_buf_address0 = tmp_52_cast_fu_1054_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_buf_address0 = out_buf_addr_2_reg_1251;
    end else begin
        out_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25))) begin
        out_buf_ce0 = 1'b1;
    end else begin
        out_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_buf_ce1 = 1'b1;
    end else begin
        out_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_955_p2))) begin
        out_buf_we0 = 1'b1;
    end else begin
        out_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_stream_data_V_1_sel)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == out_stream_last_V_1_sel)) begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B;
    end else begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_buf_address0 = tmp_54_cast_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_buf_address0 = tmp_18_cast_fu_728_p1;
    end else begin
        weight_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1)))) begin
        weight_buf_ce0 = 1'b1;
    end else begin
        weight_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        weight_buf_ce1 = 1'b1;
    end else begin
        weight_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        weight_buf_we0 = 1'b1;
    end else begin
        weight_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
        weight_buf_we1 = 1'b1;
    end else begin
        weight_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond5_fu_604_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (in_stream_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond6_fu_652_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond9_fu_682_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (in_stream_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond8_fu_755_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_785_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (in_stream_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_858_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond3_fu_912_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_955_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond1_fu_991_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state24) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond1_fu_991_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond_fu_1039_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (out_stream_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (out_stream_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state24 = ((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign converter_fu_1111_p3 = {{tmp_34_fu_1107_p1}, {tmp_30_fu_1103_p1}};

assign exitcond1_fu_991_p2 = ((i6_reg_549 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_955_p2 = ((k_reg_503 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond3_fu_912_p2 = ((j5_reg_491 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond4_fu_858_p2 = ((i4_reg_480 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond5_fu_604_p2 = ((is_idx_reg_355 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_fu_652_p2 = ((i1_reg_378 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond7_fu_785_p2 = ((is_idx_4_reg_470 == indvars_iv5_reg_423) ? 1'b1 : 1'b0);

assign exitcond8_fu_755_p2 = ((i2_reg_435 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_682_p2 = ((is_idx_2_reg_413 == indvars_iv1_reg_366) ? 1'b1 : 1'b0);

assign exitcond_fu_1039_p2 = ((os_idx_1_reg_560 == indvars_iv_reg_525) ? 1'b1 : 1'b0);

assign grp_fu_594_p4 = {{in_stream_data_V_0_data_out[63:32]}};

assign i_1_fu_646_p2 = (4'd2 + i_reg_343);

assign i_2_fu_658_p2 = (i1_reg_378 + 4'd1);

assign i_3_fu_761_p2 = (i2_reg_435 + 4'd1);

assign i_4_fu_864_p2 = (i4_reg_480 + 4'd1);

assign i_5_fu_997_p2 = (i6_reg_549 + 4'd1);

assign in_buf_address1 = tmp_42_fu_853_p1;

assign in_buf_d0 = tmp_33_fu_822_p1;

assign in_buf_d1 = grp_fu_594_p4;

assign in_stream_TREADY = in_stream_dest_V_0_state[1'd1];

assign in_stream_data_V_0_ack_in = in_stream_data_V_0_state[1'd1];

assign in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full & ~in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_load_B = (in_stream_data_V_0_sel_wr & in_stream_data_V_0_state_cmp_full);

assign in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd;

assign in_stream_data_V_0_state_cmp_full = ((in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_data_V_0_vld_in = in_stream_TVALID;

assign in_stream_data_V_0_vld_out = in_stream_data_V_0_state[1'd0];

assign in_stream_dest_V_0_vld_in = in_stream_TVALID;

assign indvars_iv_next1_fu_713_p2 = (indvars_iv1_reg_366 + 11'd128);

assign indvars_iv_next6_fu_816_p2 = (indvars_iv5_reg_423 + 12'd128);

assign indvars_iv_next_fu_1097_p2 = (indvars_iv_reg_525 + 6'd5);

assign is_idx_5_fu_767_p2 = (is_idx_3_reg_447 + 12'd128);

assign is_idx_6_fu_791_p2 = (12'd1 + is_idx_4_reg_470);

assign j_1_fu_707_p2 = (9'd2 + j_reg_402);

assign j_2_fu_810_p2 = (9'd2 + j3_reg_459);

assign j_3_fu_1091_p2 = (j7_reg_570 + 4'd2);

assign j_4_fu_918_p2 = (j5_reg_491 + 4'd1);

assign k_1_fu_961_p2 = (k_reg_503 + 9'd1);

assign last_assign_fu_1085_p2 = ((tmp_36_fu_1079_p2 == 6'd40) ? 1'b1 : 1'b0);

assign offset_buf_address1 = tmp_9_fu_641_p1;

assign offset_buf_d0 = tmp_5_fu_616_p1;

assign offset_buf_d1 = grp_fu_594_p4;

assign os_idx_2_fu_1003_p2 = (os_idx_reg_537 + 6'd5);

assign out_buf_address1 = tmp_53_cast_fu_1074_p1;

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TDEST = out_stream_dest_V_1_data_out;

assign out_stream_TID = out_stream_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_dest_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr & out_stream_data_V_1_state_cmp_full);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state[1'd1];

assign out_stream_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_dest_V_1_data_out = 5'd0;

assign out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd;

assign out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state[1'd0];

assign out_stream_id_V_1_ack_in = out_stream_id_V_1_state[1'd1];

assign out_stream_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_id_V_1_data_out = 5'd0;

assign out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd;

assign out_stream_id_V_1_vld_out = out_stream_id_V_1_state[1'd0];

assign out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state[1'd1];

assign out_stream_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_keep_V_1_data_out = 8'd255;

assign out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd;

assign out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full & ~out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_load_B = (out_stream_last_V_1_sel_wr & out_stream_last_V_1_state_cmp_full);

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_state_cmp_full = ((out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state[1'd1];

assign out_stream_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_strb_V_1_data_out = 8'd255;

assign out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd;

assign out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state[1'd0];

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_data_out = 4'd0;

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

assign p_shl1_cast_fu_902_p1 = tmp_27_fu_894_p3;

assign p_shl2_cast_fu_1017_p1 = tmp_43_fu_1009_p3;

assign p_shl3_cast_fu_1029_p1 = tmp_44_fu_1021_p3;

assign p_shl_cast_fu_890_p1 = tmp_26_fu_882_p3;

assign tmp_11_fu_688_p2 = (11'd1 + is_idx_2_reg_413);

assign tmp_12_fu_773_p3 = {{i2_reg_435}, {8'd0}};

assign tmp_13_cast_fu_694_p1 = j_reg_402;

assign tmp_13_fu_719_p1 = in_stream_data_V_0_data_out[31:0];

assign tmp_14_cast_fu_781_p1 = tmp_12_fu_773_p3;

assign tmp_14_fu_698_p2 = (tmp_13_cast_fu_694_p1 + tmp_5_cast_reg_1146);

assign tmp_17_fu_737_p2 = (tmp_18_reg_1164 | 8'd1);

assign tmp_18_cast_fu_728_p1 = tmp_14_reg_1159;

assign tmp_18_fu_703_p1 = j_reg_402[7:0];

assign tmp_19_fu_742_p3 = {{i1_reg_378}, {tmp_17_fu_737_p2}};

assign tmp_1_fu_670_p3 = {{i1_reg_378}, {8'd0}};

assign tmp_21_cast_fu_797_p1 = j3_reg_459;

assign tmp_21_fu_750_p1 = tmp_19_fu_742_p3;

assign tmp_22_fu_870_p3 = {{i4_reg_480}, {8'd0}};

assign tmp_25_fu_840_p2 = (tmp_40_reg_1210 | 8'd1);

assign tmp_26_fu_882_p3 = {{i4_reg_480}, {3'd0}};

assign tmp_27_cast_fu_878_p1 = tmp_22_fu_870_p3;

assign tmp_27_fu_894_p3 = {{i4_reg_480}, {1'd0}};

assign tmp_28_cast_fu_929_p1 = j5_reg_491;

assign tmp_28_fu_924_p1 = j5_reg_491;

assign tmp_29_cast_fu_1045_p1 = j7_reg_570;

assign tmp_29_fu_906_p2 = (p_shl1_cast_fu_902_p1 + p_shl_cast_fu_890_p1);

assign tmp_2_fu_610_p2 = (is_idx_reg_355 + 3'd1);

assign tmp_30_fu_1103_p1 = out_buf_q0;

assign tmp_32_fu_1059_p2 = (j7_reg_570 | 4'd1);

assign tmp_33_cast_fu_1065_p1 = tmp_32_fu_1059_p2;

assign tmp_33_fu_822_p1 = in_stream_data_V_0_data_out[31:0];

assign tmp_34_fu_1107_p1 = out_buf_q1;

assign tmp_36_fu_1079_p2 = (os_idx_1_reg_560 + 6'd1);

assign tmp_37_cast_fu_967_p1 = k_reg_503;

assign tmp_37_fu_801_p2 = (tmp_21_cast_fu_797_p1 + tmp_14_cast_reg_1192);

assign tmp_40_fu_806_p1 = j3_reg_459[7:0];

assign tmp_41_fu_845_p3 = {{i2_reg_435}, {tmp_25_fu_840_p2}};

assign tmp_42_fu_853_p1 = tmp_41_fu_845_p3;

assign tmp_43_cast_fu_831_p1 = tmp_37_reg_1205;

assign tmp_43_fu_1009_p3 = {{i6_reg_549}, {3'd0}};

assign tmp_44_fu_1021_p3 = {{i6_reg_549}, {1'd0}};

assign tmp_45_fu_1033_p2 = (p_shl3_cast_fu_1029_p1 + p_shl2_cast_fu_1017_p1);

assign tmp_46_fu_943_p3 = {{j5_reg_491}, {8'd0}};

assign tmp_47_fu_933_p2 = (tmp_28_cast_fu_929_p1 + tmp_29_reg_1238);

assign tmp_48_fu_1049_p2 = (tmp_45_reg_1322 + tmp_29_cast_fu_1045_p1);

assign tmp_49_fu_1069_p2 = (tmp_45_reg_1322 + tmp_33_cast_fu_1065_p1);

assign tmp_4_fu_625_p1 = i_reg_343;

assign tmp_50_cast_fu_951_p1 = tmp_46_fu_943_p3;

assign tmp_50_fu_971_p2 = (tmp_50_cast_reg_1261 + tmp_37_cast_fu_967_p1);

assign tmp_51_cast_fu_938_p1 = tmp_47_fu_933_p2;

assign tmp_51_fu_981_p2 = (tmp_27_cast_reg_1233 + tmp_37_cast_fu_967_p1);

assign tmp_52_cast_fu_1054_p1 = tmp_48_fu_1049_p2;

assign tmp_53_cast_fu_1074_p1 = tmp_49_fu_1069_p2;

assign tmp_54_cast_fu_976_p1 = tmp_50_fu_971_p2;

assign tmp_55_cast_fu_986_p1 = tmp_51_fu_981_p2;

assign tmp_5_cast_fu_678_p1 = tmp_1_fu_670_p3;

assign tmp_5_fu_616_p1 = in_stream_data_V_0_data_out[31:0];

assign tmp_8_fu_635_p2 = (i_reg_343 | 4'd1);

assign tmp_9_fu_641_p1 = tmp_8_fu_635_p2;

assign tmp_s_fu_664_p2 = (is_idx_1_reg_390 + 11'd128);

assign weight_buf_address1 = tmp_21_fu_750_p1;

assign weight_buf_d0 = tmp_13_fu_719_p1;

assign weight_buf_d1 = grp_fu_594_p4;

always @ (posedge ap_clk) begin
    tmp_5_cast_reg_1146[7:0] <= 8'b00000000;
    tmp_5_cast_reg_1146[12] <= 1'b0;
    tmp_14_cast_reg_1192[7:0] <= 8'b00000000;
    tmp_14_cast_reg_1192[12] <= 1'b0;
    tmp_27_cast_reg_1233[7:0] <= 8'b00000000;
    tmp_27_cast_reg_1233[12] <= 1'b0;
    tmp_29_reg_1238[0] <= 1'b0;
    tmp_50_cast_reg_1261[7:0] <= 8'b00000000;
    tmp_50_cast_reg_1261[12] <= 1'b0;
    tmp_45_reg_1322[0] <= 1'b0;
end

endmodule //mmult_hw
